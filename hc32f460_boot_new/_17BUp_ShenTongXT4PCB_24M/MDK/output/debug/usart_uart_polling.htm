<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\debug\usart_uart_polling.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\debug\usart_uart_polling.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Wed Feb 19 16:25:03 2025
<BR><P>
<H3>Maximum Stack Usage =       1184 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; UDS_MAIN_Process &rArr; UDS_MainFun &rArr; TP_WriteAFrameDataInTP &rArr; WriteDataInFifo &rArr; GetCanWriteLen &rArr; FindFifo
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[8a]">IRQ128_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8a]">IRQ128_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[b5]">BSP_AbortCANTxMsg</a> from main.o(i.BSP_AbortCANTxMsg) referenced from main.o(i.main)
 <LI><a href="#[b6]">BSP_Init</a> from main.o(i.BSP_Init) referenced from main.o(i.main)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[c5]">CommunicationControl</a> from app_uds_cfg.o(i.CommunicationControl) referenced from app_uds_cfg.o(.constdata)
 <LI><a href="#[c6]">ControlDTCSetting</a> from app_uds_cfg.o(i.ControlDTCSetting) referenced from app_uds_cfg.o(.constdata)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[c4]">DigSession</a> from app_uds_cfg.o(i.DigSession) referenced from app_uds_cfg.o(.constdata)
 <LI><a href="#[aa]">DoCheckSum</a> from app_uds_cfg.o(i.DoCheckSum) referenced from app_uds_cfg.o(i.RoutineControl)
 <LI><a href="#[a9]">DoEraseFlash</a> from app_uds_cfg.o(i.DoEraseFlash) referenced from app_uds_cfg.o(i.RoutineControl)
 <LI><a href="#[9f]">DoEraseFlashResponse</a> from app_uds_cfg.o(i.DoEraseFlashResponse) referenced from app_uds_cfg.o(i.DoEraseFlash)
 <LI><a href="#[a8]">DoResetMCU</a> from app_uds_cfg.o(i.DoResetMCU) referenced from app_uds_cfg.o(i.ResetECU)
 <LI><a href="#[9e]">DoResponseChecksum</a> from app_uds_cfg.o(i.DoResponseChecksum) referenced from app_uds_cfg.o(i.DoCheckSum)
 <LI><a href="#[a6]">FrameReceivedCallbackHandler</a> from hal_uart.o(i.FrameReceivedCallbackHandler) referenced from hal_uart.o(i.Hal_UartInit)
 <LI><a href="#[a5]">HAL_FLASH_Deinit</a> from hal_flash.o(i.HAL_FLASH_Deinit) referenced from hal_flash.o(i.HAL_FLASH_RegisterFlashAPI)
 <LI><a href="#[a2]">HAL_FLASH_EraseSector</a> from hal_flash.o(i.HAL_FLASH_EraseSector) referenced from hal_flash.o(i.HAL_FLASH_RegisterFlashAPI)
 <LI><a href="#[a1]">HAL_FLASH_Init</a> from hal_flash.o(i.HAL_FLASH_Init) referenced from hal_flash.o(i.HAL_FLASH_RegisterFlashAPI)
 <LI><a href="#[a4]">HAL_FLASH_ReadData</a> from hal_flash.o(i.HAL_FLASH_ReadData) referenced from hal_flash.o(i.HAL_FLASH_RegisterFlashAPI)
 <LI><a href="#[a3]">HAL_FLASH_WriteData</a> from hal_flash.o(i.HAL_FLASH_WriteData) referenced from hal_flash.o(i.HAL_FLASH_RegisterFlashAPI)
 <LI><a href="#[ab]">HAL_TP_DoTxMsgSuccesfulCallback</a> from hal_tp.o(i.HAL_TP_DoTxMsgSuccesfulCallback) referenced from main.o(i.SendMsgMainFun)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[a]">IRQ000_Handler</a> from hc32_ll_interrupts.o(i.IRQ000_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[b]">IRQ001_Handler</a> from hc32_ll_interrupts.o(i.IRQ001_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[c]">IRQ002_Handler</a> from hc32_ll_interrupts.o(i.IRQ002_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[d]">IRQ003_Handler</a> from hc32_ll_interrupts.o(i.IRQ003_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[e]">IRQ004_Handler</a> from hc32_ll_interrupts.o(i.IRQ004_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[f]">IRQ005_Handler</a> from hc32_ll_interrupts.o(i.IRQ005_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[10]">IRQ006_Handler</a> from hc32_ll_interrupts.o(i.IRQ006_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[11]">IRQ007_Handler</a> from hc32_ll_interrupts.o(i.IRQ007_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[12]">IRQ008_Handler</a> from hc32_ll_interrupts.o(i.IRQ008_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[13]">IRQ009_Handler</a> from hc32_ll_interrupts.o(i.IRQ009_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[14]">IRQ010_Handler</a> from hc32_ll_interrupts.o(i.IRQ010_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[15]">IRQ011_Handler</a> from hc32_ll_interrupts.o(i.IRQ011_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[16]">IRQ012_Handler</a> from hc32_ll_interrupts.o(i.IRQ012_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[17]">IRQ013_Handler</a> from hc32_ll_interrupts.o(i.IRQ013_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[18]">IRQ014_Handler</a> from hc32_ll_interrupts.o(i.IRQ014_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[19]">IRQ015_Handler</a> from hc32_ll_interrupts.o(i.IRQ015_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[1a]">IRQ016_Handler</a> from hc32_ll_interrupts.o(i.IRQ016_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[1b]">IRQ017_Handler</a> from hc32_ll_interrupts.o(i.IRQ017_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[1c]">IRQ018_Handler</a> from hc32_ll_interrupts.o(i.IRQ018_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[1d]">IRQ019_Handler</a> from hc32_ll_interrupts.o(i.IRQ019_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[1e]">IRQ020_Handler</a> from hc32_ll_interrupts.o(i.IRQ020_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[1f]">IRQ021_Handler</a> from hc32_ll_interrupts.o(i.IRQ021_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[20]">IRQ022_Handler</a> from hc32_ll_interrupts.o(i.IRQ022_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[21]">IRQ023_Handler</a> from hc32_ll_interrupts.o(i.IRQ023_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[22]">IRQ024_Handler</a> from hc32_ll_interrupts.o(i.IRQ024_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[23]">IRQ025_Handler</a> from hc32_ll_interrupts.o(i.IRQ025_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[24]">IRQ026_Handler</a> from hc32_ll_interrupts.o(i.IRQ026_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[25]">IRQ027_Handler</a> from hc32_ll_interrupts.o(i.IRQ027_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[26]">IRQ028_Handler</a> from hc32_ll_interrupts.o(i.IRQ028_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[27]">IRQ029_Handler</a> from hc32_ll_interrupts.o(i.IRQ029_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[28]">IRQ030_Handler</a> from hc32_ll_interrupts.o(i.IRQ030_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[29]">IRQ031_Handler</a> from hc32_ll_interrupts.o(i.IRQ031_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[2a]">IRQ032_Handler</a> from hc32_ll_interrupts.o(i.IRQ032_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[2b]">IRQ033_Handler</a> from hc32_ll_interrupts.o(i.IRQ033_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[2c]">IRQ034_Handler</a> from hc32_ll_interrupts.o(i.IRQ034_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[2d]">IRQ035_Handler</a> from hc32_ll_interrupts.o(i.IRQ035_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[2e]">IRQ036_Handler</a> from hc32_ll_interrupts.o(i.IRQ036_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[2f]">IRQ037_Handler</a> from hc32_ll_interrupts.o(i.IRQ037_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[30]">IRQ038_Handler</a> from hc32_ll_interrupts.o(i.IRQ038_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[31]">IRQ039_Handler</a> from hc32_ll_interrupts.o(i.IRQ039_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[32]">IRQ040_Handler</a> from hc32_ll_interrupts.o(i.IRQ040_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[33]">IRQ041_Handler</a> from hc32_ll_interrupts.o(i.IRQ041_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[34]">IRQ042_Handler</a> from hc32_ll_interrupts.o(i.IRQ042_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[35]">IRQ043_Handler</a> from hc32_ll_interrupts.o(i.IRQ043_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[36]">IRQ044_Handler</a> from hc32_ll_interrupts.o(i.IRQ044_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[37]">IRQ045_Handler</a> from hc32_ll_interrupts.o(i.IRQ045_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[38]">IRQ046_Handler</a> from hc32_ll_interrupts.o(i.IRQ046_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[39]">IRQ047_Handler</a> from hc32_ll_interrupts.o(i.IRQ047_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[3a]">IRQ048_Handler</a> from hc32_ll_interrupts.o(i.IRQ048_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[3b]">IRQ049_Handler</a> from hc32_ll_interrupts.o(i.IRQ049_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[3c]">IRQ050_Handler</a> from hc32_ll_interrupts.o(i.IRQ050_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[3d]">IRQ051_Handler</a> from hc32_ll_interrupts.o(i.IRQ051_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[3e]">IRQ052_Handler</a> from hc32_ll_interrupts.o(i.IRQ052_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[3f]">IRQ053_Handler</a> from hc32_ll_interrupts.o(i.IRQ053_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[40]">IRQ054_Handler</a> from hc32_ll_interrupts.o(i.IRQ054_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[41]">IRQ055_Handler</a> from hc32_ll_interrupts.o(i.IRQ055_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[42]">IRQ056_Handler</a> from hc32_ll_interrupts.o(i.IRQ056_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[43]">IRQ057_Handler</a> from hc32_ll_interrupts.o(i.IRQ057_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[44]">IRQ058_Handler</a> from hc32_ll_interrupts.o(i.IRQ058_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[45]">IRQ059_Handler</a> from hc32_ll_interrupts.o(i.IRQ059_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[46]">IRQ060_Handler</a> from hc32_ll_interrupts.o(i.IRQ060_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[47]">IRQ061_Handler</a> from hc32_ll_interrupts.o(i.IRQ061_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[48]">IRQ062_Handler</a> from hc32_ll_interrupts.o(i.IRQ062_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[49]">IRQ063_Handler</a> from hc32_ll_interrupts.o(i.IRQ063_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[4a]">IRQ064_Handler</a> from hc32_ll_interrupts.o(i.IRQ064_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[4b]">IRQ065_Handler</a> from hc32_ll_interrupts.o(i.IRQ065_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[4c]">IRQ066_Handler</a> from hc32_ll_interrupts.o(i.IRQ066_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[4d]">IRQ067_Handler</a> from hc32_ll_interrupts.o(i.IRQ067_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[4e]">IRQ068_Handler</a> from hc32_ll_interrupts.o(i.IRQ068_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[4f]">IRQ069_Handler</a> from hc32_ll_interrupts.o(i.IRQ069_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[50]">IRQ070_Handler</a> from hc32_ll_interrupts.o(i.IRQ070_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[51]">IRQ071_Handler</a> from hc32_ll_interrupts.o(i.IRQ071_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[52]">IRQ072_Handler</a> from hc32_ll_interrupts.o(i.IRQ072_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[53]">IRQ073_Handler</a> from hc32_ll_interrupts.o(i.IRQ073_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[54]">IRQ074_Handler</a> from hc32_ll_interrupts.o(i.IRQ074_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[55]">IRQ075_Handler</a> from hc32_ll_interrupts.o(i.IRQ075_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[56]">IRQ076_Handler</a> from hc32_ll_interrupts.o(i.IRQ076_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[57]">IRQ077_Handler</a> from hc32_ll_interrupts.o(i.IRQ077_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[58]">IRQ078_Handler</a> from hc32_ll_interrupts.o(i.IRQ078_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[59]">IRQ079_Handler</a> from hc32_ll_interrupts.o(i.IRQ079_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[5a]">IRQ080_Handler</a> from hc32_ll_interrupts.o(i.IRQ080_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[5b]">IRQ081_Handler</a> from hc32_ll_interrupts.o(i.IRQ081_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[5c]">IRQ082_Handler</a> from hc32_ll_interrupts.o(i.IRQ082_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[5d]">IRQ083_Handler</a> from hc32_ll_interrupts.o(i.IRQ083_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[5e]">IRQ084_Handler</a> from hc32_ll_interrupts.o(i.IRQ084_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[5f]">IRQ085_Handler</a> from hc32_ll_interrupts.o(i.IRQ085_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[60]">IRQ086_Handler</a> from hc32_ll_interrupts.o(i.IRQ086_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[61]">IRQ087_Handler</a> from hc32_ll_interrupts.o(i.IRQ087_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[62]">IRQ088_Handler</a> from hc32_ll_interrupts.o(i.IRQ088_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[63]">IRQ089_Handler</a> from hc32_ll_interrupts.o(i.IRQ089_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[64]">IRQ090_Handler</a> from hc32_ll_interrupts.o(i.IRQ090_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[65]">IRQ091_Handler</a> from hc32_ll_interrupts.o(i.IRQ091_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[66]">IRQ092_Handler</a> from hc32_ll_interrupts.o(i.IRQ092_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[67]">IRQ093_Handler</a> from hc32_ll_interrupts.o(i.IRQ093_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[68]">IRQ094_Handler</a> from hc32_ll_interrupts.o(i.IRQ094_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[69]">IRQ095_Handler</a> from hc32_ll_interrupts.o(i.IRQ095_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[6a]">IRQ096_Handler</a> from hc32_ll_interrupts.o(i.IRQ096_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[6b]">IRQ097_Handler</a> from hc32_ll_interrupts.o(i.IRQ097_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[6c]">IRQ098_Handler</a> from hc32_ll_interrupts.o(i.IRQ098_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[6d]">IRQ099_Handler</a> from hc32_ll_interrupts.o(i.IRQ099_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[6e]">IRQ100_Handler</a> from hc32_ll_interrupts.o(i.IRQ100_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[6f]">IRQ101_Handler</a> from hc32_ll_interrupts.o(i.IRQ101_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[70]">IRQ102_Handler</a> from hc32_ll_interrupts.o(i.IRQ102_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[71]">IRQ103_Handler</a> from hc32_ll_interrupts.o(i.IRQ103_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[72]">IRQ104_Handler</a> from hc32_ll_interrupts.o(i.IRQ104_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[73]">IRQ105_Handler</a> from hc32_ll_interrupts.o(i.IRQ105_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[74]">IRQ106_Handler</a> from hc32_ll_interrupts.o(i.IRQ106_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[75]">IRQ107_Handler</a> from hc32_ll_interrupts.o(i.IRQ107_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[76]">IRQ108_Handler</a> from hc32_ll_interrupts.o(i.IRQ108_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[77]">IRQ109_Handler</a> from hc32_ll_interrupts.o(i.IRQ109_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[78]">IRQ110_Handler</a> from hc32_ll_interrupts.o(i.IRQ110_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[79]">IRQ111_Handler</a> from hc32_ll_interrupts.o(i.IRQ111_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[7a]">IRQ112_Handler</a> from hc32_ll_interrupts.o(i.IRQ112_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[7b]">IRQ113_Handler</a> from hc32_ll_interrupts.o(i.IRQ113_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[7c]">IRQ114_Handler</a> from hc32_ll_interrupts.o(i.IRQ114_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[7d]">IRQ115_Handler</a> from hc32_ll_interrupts.o(i.IRQ115_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[7e]">IRQ116_Handler</a> from hc32_ll_interrupts.o(i.IRQ116_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[7f]">IRQ117_Handler</a> from hc32_ll_interrupts.o(i.IRQ117_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[80]">IRQ118_Handler</a> from hc32_ll_interrupts.o(i.IRQ118_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[81]">IRQ119_Handler</a> from hc32_ll_interrupts.o(i.IRQ119_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[82]">IRQ120_Handler</a> from hc32_ll_interrupts.o(i.IRQ120_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[83]">IRQ121_Handler</a> from hc32_ll_interrupts.o(i.IRQ121_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[84]">IRQ122_Handler</a> from hc32_ll_interrupts.o(i.IRQ122_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[85]">IRQ123_Handler</a> from hc32_ll_interrupts.o(i.IRQ123_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[86]">IRQ124_Handler</a> from hc32_ll_interrupts.o(i.IRQ124_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[87]">IRQ125_Handler</a> from hc32_ll_interrupts.o(i.IRQ125_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[88]">IRQ126_Handler</a> from hc32_ll_interrupts.o(i.IRQ126_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[89]">IRQ127_Handler</a> from hc32_ll_interrupts.o(i.IRQ127_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[8a]">IRQ128_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[8b]">IRQ129_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[8c]">IRQ130_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[8d]">IRQ131_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[8e]">IRQ132_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[8f]">IRQ133_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[90]">IRQ134_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[91]">IRQ135_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[92]">IRQ136_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[93]">IRQ137_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[94]">IRQ138_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[95]">IRQ139_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[96]">IRQ140_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[97]">IRQ141_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[98]">IRQ142_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[99]">IRQ143_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[ce]">ReadDataByIdentifier</a> from app_uds_cfg.o(i.ReadDataByIdentifier) referenced from app_uds_cfg.o(.constdata)
 <LI><a href="#[c9]">RequestDownload</a> from app_uds_cfg.o(i.RequestDownload) referenced from app_uds_cfg.o(.constdata)
 <LI><a href="#[9d]">RequestMoreTime</a> from app_uds_cfg.o(i.RequestMoreTime) referenced from app_uds_cfg.o(i.DoCheckSum)
 <LI><a href="#[9d]">RequestMoreTime</a> from app_uds_cfg.o(i.RequestMoreTime) referenced from app_uds_cfg.o(i.DoEraseFlash)
 <LI><a href="#[a7]">RequestMoreTimeCallback</a> from app_uds_cfg.o(i.RequestMoreTimeCallback) referenced from app_uds_cfg.o(i.RequestMoreTime)
 <LI><a href="#[cb]">RequestTransferExit</a> from app_uds_cfg.o(i.RequestTransferExit) referenced from app_uds_cfg.o(.constdata)
 <LI><a href="#[a0]">RequetMoreTimeSuccessfulFromHost</a> from app_flash.o(i.RequetMoreTimeSuccessfulFromHost) referenced from app_flash.o(i.FlashErase)
 <LI><a href="#[cd]">ResetECU</a> from app_uds_cfg.o(i.ResetECU) referenced from app_uds_cfg.o(.constdata)
 <LI><a href="#[0]">Reset_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[cc]">RoutineControl</a> from app_uds_cfg.o(i.RoutineControl) referenced from app_uds_cfg.o(.constdata)
 <LI><a href="#[6]">SVC_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[c7]">SecurityAccess</a> from app_uds_cfg.o(i.SecurityAccess) referenced from app_uds_cfg.o(.constdata)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[9b]">SystemInit</a> from system_hc32f460.o(i.SystemInit) referenced from startup_hc32f460.o(.text)
 <LI><a href="#[ac]">TIM0_A_CompareIrqCallback</a> from time.o(i.TIM0_A_CompareIrqCallback) referenced from time.o(i.TIM0_A_Config)
 <LI><a href="#[b2]">TXConfrimMsgCallback</a> from app_uds_cfg.o(i.TXConfrimMsgCallback) referenced from app_uds_cfg.o(i.UDS_TxMsgToHost)
 <LI><a href="#[ca]">TransferData</a> from app_uds_cfg.o(i.TransferData) referenced from app_uds_cfg.o(.constdata)
 <LI><a href="#[b9]">UARTTP_AbortTxMsg</a> from hal_uart_tp_cfg.o(i.UARTTP_AbortTxMsg) referenced from hal_uart_tp_cfg.o(.constdata)
 <LI><a href="#[be]">UARTTP_DoReceiveCF</a> from hal_uart_tp.o(i.UARTTP_DoReceiveCF) referenced from hal_uart_tp.o(.constdata)
 <LI><a href="#[c1]">UARTTP_DoReceiveFC</a> from hal_uart_tp.o(i.UARTTP_DoReceiveFC) referenced from hal_uart_tp.o(.constdata)
 <LI><a href="#[bc]">UARTTP_DoReceiveFF</a> from hal_uart_tp.o(i.UARTTP_DoReceiveFF) referenced from hal_uart_tp.o(.constdata)
 <LI><a href="#[bb]">UARTTP_DoReceiveSF</a> from hal_uart_tp.o(i.UARTTP_DoReceiveSF) referenced from hal_uart_tp.o(.constdata)
 <LI><a href="#[c2]">UARTTP_DoTransmitCF</a> from hal_uart_tp.o(i.UARTTP_DoTransmitCF) referenced from hal_uart_tp.o(.constdata)
 <LI><a href="#[ad]">UARTTP_DoTransmitCFCallBack</a> from hal_uart_tp.o(i.UARTTP_DoTransmitCFCallBack) referenced from hal_uart_tp.o(i.UARTTP_DoTransmitCF)
 <LI><a href="#[bd]">UARTTP_DoTransmitFC</a> from hal_uart_tp.o(i.UARTTP_DoTransmitFC) referenced from hal_uart_tp.o(.constdata)
 <LI><a href="#[af]">UARTTP_DoTransmitFCCallBack</a> from hal_uart_tp.o(i.UARTTP_DoTransmitFCCallBack) referenced from hal_uart_tp.o(i.UARTTP_DoTransmitFC)
 <LI><a href="#[c0]">UARTTP_DoTransmitFF</a> from hal_uart_tp.o(i.UARTTP_DoTransmitFF) referenced from hal_uart_tp.o(.constdata)
 <LI><a href="#[b0]">UARTTP_DoTransmitFFCallBack</a> from hal_uart_tp.o(i.UARTTP_DoTransmitFFCallBack) referenced from hal_uart_tp.o(i.UARTTP_DoTransmitFF)
 <LI><a href="#[bf]">UARTTP_DoTransmitSF</a> from hal_uart_tp.o(i.UARTTP_DoTransmitSF) referenced from hal_uart_tp.o(.constdata)
 <LI><a href="#[b1]">UARTTP_DoTransmitSFCallBack</a> from hal_uart_tp.o(i.UARTTP_DoTransmitSFCallBack) referenced from hal_uart_tp.o(i.UARTTP_DoTransmitSF)
 <LI><a href="#[ba]">UARTTP_DoUartTpIdle</a> from hal_uart_tp.o(i.UARTTP_DoUartTpIdle) referenced from hal_uart_tp.o(.constdata)
 <LI><a href="#[c3]">UARTTP_DoWaitingTxMsg</a> from hal_uart_tp.o(i.UARTTP_DoWaitingTxMsg) referenced from hal_uart_tp.o(.constdata)
 <LI><a href="#[b8]">UARTTP_RxMsg</a> from hal_uart_tp_cfg.o(i.UARTTP_RxMsg) referenced from hal_uart_tp_cfg.o(.constdata)
 <LI><a href="#[b7]">UARTTP_TxMsg</a> from hal_uart_tp_cfg.o(i.UARTTP_TxMsg) referenced from hal_uart_tp_cfg.o(.constdata)
 <LI><a href="#[ae]">UARTTP_TxMsgSuccessfulCallBack</a> from hal_uart_tp.o(i.UARTTP_TxMsgSuccessfulCallBack) referenced from hal_uart_tp.o(i.UARTTP_DoTransmitCF)
 <LI><a href="#[ae]">UARTTP_TxMsgSuccessfulCallBack</a> from hal_uart_tp.o(i.UARTTP_TxMsgSuccessfulCallBack) referenced from hal_uart_tp.o(i.UARTTP_DoTransmitFC)
 <LI><a href="#[ae]">UARTTP_TxMsgSuccessfulCallBack</a> from hal_uart_tp.o(i.UARTTP_TxMsgSuccessfulCallBack) referenced from hal_uart_tp.o(i.UARTTP_DoTransmitFF)
 <LI><a href="#[ae]">UARTTP_TxMsgSuccessfulCallBack</a> from hal_uart_tp.o(i.UARTTP_TxMsgSuccessfulCallBack) referenced from hal_uart_tp.o(i.UARTTP_DoTransmitSF)
 <LI><a href="#[b3]">USART_RxError_IrqCallback</a> from uart.o(i.USART_RxError_IrqCallback) referenced from uart.o(i.Uart_Init)
 <LI><a href="#[b4]">USART_RxFull_IrqCallback</a> from uart.o(i.USART_RxFull_IrqCallback) referenced from uart.o(i.Uart_Init)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[c8]">WriteDataByIdentifier</a> from app_uds_cfg.o(i.WriteDataByIdentifier) referenced from app_uds_cfg.o(.constdata)
 <LI><a href="#[9c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_hc32f460.o(.text)
 <LI><a href="#[9a]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[9c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(.text)
</UL>
<P><STRONG><a name="[1fd]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[d1]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[e2]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1fe]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1ff]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[200]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[201]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[202]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[203]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>IRQ128_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>IRQ129_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>IRQ130_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>IRQ131_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>IRQ132_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>IRQ133_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>IRQ134_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>IRQ135_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>IRQ136_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>IRQ137_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>IRQ138_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>IRQ139_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>IRQ140_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>IRQ141_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>IRQ142_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>IRQ143_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[d3]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CalculateBrr
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartCard_CalculateBrr
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSync_CalculateBrr
</UL>

<P><STRONG><a name="[159]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_DoTransmitSF
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_DoTransmitCF
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_DoReceiveFF
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_DoReceiveCF
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_TxMsg
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SavedFlashData
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecurityAccess
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveFingerPrint
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ProgramRegion
</UL>

<P><STRONG><a name="[14f]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Rx_Message
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTTP_MainFun
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadNewestAppInfoFromFlash
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_GetOldAPPType
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_GetNewestAPPType
</UL>

<P><STRONG><a name="[204]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_InitDowloadInfo_Inline
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_APP_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecurityAccess
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_InitDowloadInfo
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[205]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[206]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_EraseFlashDriverInRAM_Inline
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_EraseFlashDriverInRAM
</UL>

<P><STRONG><a name="[13a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_DoUartTpIdle
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_RxMsg
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_InitDowloadInfo_Inline
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MainFun
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_APP_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_TxMsgToHost
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RequestMoreTime
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_InitDowloadInfo
</UL>

<P><STRONG><a name="[207]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[d9]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CalculateBrr
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartCard_CalculateBrr
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSync_CalculateBrr
</UL>

<P><STRONG><a name="[db]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CalculateBrr
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartCard_CalculateBrr
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSync_CalculateBrr
</UL>

<P><STRONG><a name="[208]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>BSP_ReadFlashByte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, flash.o(i.BSP_ReadFlashByte))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashMemory
</UL>

<P><STRONG><a name="[dc]"></a>BSP_WDT_FeedDog</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wdt.o(i.BSP_WDT_FeedDog))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_WDT_FeedDog
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_FeedDog
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_WDT_FeedDog
</UL>

<P><STRONG><a name="[1cc]"></a>CRC_HAL_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_crc.o(i.CRC_HAL_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MAIN_Init
</UL>

<P><STRONG><a name="[cf]"></a>DDL_AssertHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hc32_ll_utility.o(i.DDL_AssertHandler))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLInit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLCmd
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetStableStatus
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockSrc
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockDiv
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetReadWaitCycle
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFunc
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputPins
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AnalogCmd
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCM_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCM_GetStatus
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCM_Cmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCM_ClearStatus
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg2PeriphClockCmd
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg1PeriphClockCmd
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg0PeriphClockCmd
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SetWaitCycle
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalInit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalCmd
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Xtal32Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Xtal32Cmd
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WaitStatus
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetUsartClockFreq
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CalculateBrr
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartCard_CalculateBrr
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSync_CalculateBrr
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_Start
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_IntCmd
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_Init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_HWStopCondCmd
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_GetCountValue
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_ClearStatus
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_SetWaitCycle
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_HighSpeedToHighPerformance
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_IrqSignIn
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT_ClearExtIntStatus
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteData
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_Trans
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_Init
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadData
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearStatus
</UL>

<P><STRONG><a name="[de]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CalculateBrr
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartCard_CalculateBrr
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSync_CalculateBrr
</UL>

<P><STRONG><a name="[e0]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CalculateBrr
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartCard_CalculateBrr
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSync_CalculateBrr
</UL>

<P><STRONG><a name="[d5]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[209]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[20a]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[20b]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[da]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>

<P><STRONG><a name="[d2]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[20c]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>ApplyFifo</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, multi_cyc_fifo.o(i.ApplyFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ApplyFifo &rArr; FindFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFifo
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddInList
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_UartInit
</UL>

<P><STRONG><a name="[e6]"></a>BSP_CLK_Init</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, ev_hc32f460_lqfp100_v2.o(i.BSP_CLK_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BSP_CLK_Init &rArr; CLK_PLLInit &rArr; CLK_PLLCmd &rArr; CLK_WaitStable &rArr; CLK_GetStableStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLInit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetStableStatus
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetReadWaitCycle
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AnalogCmd
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SetWaitCycle
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalStructInit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysClockSrc
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetClockDiv
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLStructInit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_SetWaitCycle
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_HighSpeedToHighPerformance
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[171]"></a>BSP_EraseFlashSector</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, flash.o(i.BSP_EraseFlashSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_EraseFlashSector
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_EraseSector
</UL>

<P><STRONG><a name="[fc]"></a>BSP_InitFlashAPI</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, flash.o(i.BSP_InitFlashAPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_InitFlashAPI
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_GetFlashDriverInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Init
</UL>

<P><STRONG><a name="[d0]"></a>BSP_KEY_KEY10_IrqHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ev_hc32f460_lqfp100_v2.o(i.BSP_KEY_KEY10_IrqHandler), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_KEY_KEY10_IrqHandler &rArr; GPIO_ReadInputPins
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputPins
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT_ClearExtIntStatus
</UL>

<P><STRONG><a name="[100]"></a>BSP_SW_RESTT</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, wdt.o(i.BSP_SW_RESTT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_SW_RESTT &rArr; WDT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SW_RESTT
</UL>

<P><STRONG><a name="[1d0]"></a>BSP_TIMER_Is100msTickTimeout</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, time.o(i.BSP_TIMER_Is100msTickTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MAIN_Process
</UL>

<P><STRONG><a name="[1ce]"></a>BSP_TIMER_Is1msTickTimeout</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, time.o(i.BSP_TIMER_Is1msTickTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MAIN_Process
</UL>

<P><STRONG><a name="[178]"></a>BSP_WriteFlash</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, flash.o(i.BSP_WriteFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_WriteFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_WriteData
</UL>

<P><STRONG><a name="[f4]"></a>BSP_XTAL32_Init</STRONG> (Thumb, 232 bytes, Stack size 56 bytes, ev_hc32f460_lqfp100_v2.o(i.BSP_XTAL32_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BSP_XTAL32_Init &rArr; CLK_Xtal32Init &rArr; CLK_Xtal32Cmd &rArr; DDL_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AnalogCmd
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCM_StructInit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCM_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCM_GetStatus
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCM_DeInit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCM_Cmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCM_ClearStatus
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg0PeriphClockCmd
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_DelayUS
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Xtal32StructInit
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Xtal32Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Xtal32Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[f6]"></a>BT615Init</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, bt615.o(i.BT615Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BT615Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fscbt615_Work_Mode_Set
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fscbt615_Trans_Mode_Set
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fscbt615_Reset_Set
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fscbt615_Power_Set
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fscbt615_Disconnect_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[116]"></a>Boot_CheckReqBootloaderMode</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app_boot.o(i.Boot_CheckReqBootloaderMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = Boot_CheckReqBootloaderMode &rArr; UDS_TxMsgToHost &rArr; TP_WriteAFrameDataInTP &rArr; WriteDataInFifo &rArr; GetCanWriteLen &rArr; FindFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRequestEnterBootloader
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRequestEnterBootloaderFlag
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_TxMsgToHost
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MAIN_Init
</UL>

<P><STRONG><a name="[120]"></a>Boot_JumpToApp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, app_boot_cfg.o(i.Boot_JumpToApp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Boot_JumpToApp
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_JumpToAppOrNot
</UL>

<P><STRONG><a name="[11e]"></a>Boot_JumpToAppOrNot</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_boot.o(i.Boot_JumpToAppOrNot))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Boot_JumpToAppOrNot &rArr; Boot_IsAPPValid &rArr; Flash_IsReadAppInfoFromFlashValid &rArr; ReadNewestAppInfoFromFlash &rArr; Flash_GetNewestAPPType &rArr; DoCheckNewestAPPInfo &rArr; CRC_HAL_CreatSoftwareCrc &rArr; CreatSoftwareCrc16
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRequestEnterBootloader
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_JumpToApp
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_IsAPPValid
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_GetResetHandlerAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MAIN_Init
</UL>

<P><STRONG><a name="[ed]"></a>CLK_GetStableStatus</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hc32_ll_clk.o(i.CLK_GetStableStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_GetStableStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitStable
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CLK_Init
</UL>

<P><STRONG><a name="[121]"></a>CLK_PLLCmd</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, hc32_ll_clk.o(i.CLK_PLLCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLK_PLLCmd &rArr; CLK_WaitStable &rArr; CLK_GetStableStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitStable
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLInit
</UL>

<P><STRONG><a name="[ec]"></a>CLK_PLLInit</STRONG> (Thumb, 596 bytes, Stack size 24 bytes, hc32_ll_clk.o(i.CLK_PLLInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CLK_PLLInit &rArr; CLK_PLLCmd &rArr; CLK_WaitStable &rArr; CLK_GetStableStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLCmd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CLK_Init
</UL>

<P><STRONG><a name="[e9]"></a>CLK_PLLStructInit</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, hc32_ll_clk.o(i.CLK_PLLStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CLK_Init
</UL>

<P><STRONG><a name="[ea]"></a>CLK_SetClockDiv</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, hc32_ll_clk.o(i.CLK_SetClockDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CLK_SetClockDiv &rArr; SetSysClockDiv &rArr; DDL_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockDiv
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CLK_Init
</UL>

<P><STRONG><a name="[f2]"></a>CLK_SetSysClockSrc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_clk.o(i.CLK_SetSysClockSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLK_SetSysClockSrc &rArr; SetSysClockSrc &rArr; DDL_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockSrc
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CLK_Init
</UL>

<P><STRONG><a name="[102]"></a>CLK_Xtal32Cmd</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, hc32_ll_clk.o(i.CLK_Xtal32Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLK_Xtal32Cmd &rArr; DDL_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_DelayUS
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_XTAL32_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Xtal32Init
</UL>

<P><STRONG><a name="[105]"></a>CLK_Xtal32Init</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, hc32_ll_clk.o(i.CLK_Xtal32Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CLK_Xtal32Init &rArr; CLK_Xtal32Cmd &rArr; DDL_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Xtal32Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_XTAL32_Init
</UL>

<P><STRONG><a name="[104]"></a>CLK_Xtal32StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32_ll_clk.o(i.CLK_Xtal32StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_XTAL32_Init
</UL>

<P><STRONG><a name="[126]"></a>CLK_XtalCmd</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, hc32_ll_clk.o(i.CLK_XtalCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLK_XtalCmd &rArr; CLK_WaitStable &rArr; CLK_GetStableStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitStable
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalInit
</UL>

<P><STRONG><a name="[eb]"></a>CLK_XtalInit</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, hc32_ll_clk.o(i.CLK_XtalInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CLK_XtalInit &rArr; CLK_XtalCmd &rArr; CLK_WaitStable &rArr; CLK_GetStableStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CLK_Init
</UL>

<P><STRONG><a name="[e8]"></a>CLK_XtalStructInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hc32_ll_clk.o(i.CLK_XtalStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CLK_Init
</UL>

<P><STRONG><a name="[127]"></a>CRC_HAL_CreatHardwareCrc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, hal_crc.o(i.CRC_HAL_CreatHardwareCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CRC_HAL_CreatHardwareCrc &rArr; CreatSoftwareCrc16
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatSoftwareCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashChecksum
</UL>

<P><STRONG><a name="[115]"></a>CRC_HAL_CreatSoftwareCrc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, hal_crc.o(i.CRC_HAL_CreatSoftwareCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CRC_HAL_CreatSoftwareCrc &rArr; CreatSoftwareCrc16
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatSoftwareCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashErase
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCheckNewestAPPInfo
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteFlashAppInfo
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveFingerPrint
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_IsReadAppInfoFromFlashValid
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_CalculateInfoCRC
</UL>

<P><STRONG><a name="[129]"></a>ClearFIFO</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, multi_cyc_fifo.o(i.ClearFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ClearFIFO &rArr; FindFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_TxMsg
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_ClearTXBUSFIFO
</UL>

<P><STRONG><a name="[118]"></a>ClearRequestEnterBootloaderFlag</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_boot_cfg.o(i.ClearRequestEnterBootloaderFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ClearRequestEnterBootloaderFlag &rArr; Boot_CalculateInfoCRC &rArr; CRC_HAL_CreatSoftwareCrc &rArr; CreatSoftwareCrc16
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_CalculateInfoCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_CheckReqBootloaderMode
</UL>

<P><STRONG><a name="[1a4]"></a>DDL_DelayMS</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, hc32_ll_utility.o(i.DDL_DelayMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DDL_DelayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Init_Template
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgMainFun
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_A_Config
</UL>

<P><STRONG><a name="[103]"></a>DDL_DelayUS</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hc32_ll_utility.o(i.DDL_DelayUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DDL_DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockSrc
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockDiv
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_XTAL32_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Xtal32Cmd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_HighSpeedToHighPerformance
</UL>

<P><STRONG><a name="[ef]"></a>EFM_SetWaitCycle</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, hc32_ll_efm.o(i.EFM_SetWaitCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EFM_SetWaitCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CLK_Init
</UL>

<P><STRONG><a name="[ff]"></a>EXTINT_ClearExtIntStatus</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.EXTINT_ClearExtIntStatus), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTINT_ClearExtIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_KEY_KEY10_IrqHandler
</UL>

<P><STRONG><a name="[106]"></a>FCG_Fcg0PeriphClockCmd</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, hc32_ll_fcg.o(i.FCG_Fcg0PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FCG_Fcg0PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_XTAL32_Init
</UL>

<P><STRONG><a name="[135]"></a>FCG_Fcg1PeriphClockCmd</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hc32_ll_fcg.o(i.FCG_Fcg1PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FCG_Fcg1PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[136]"></a>FCG_Fcg2PeriphClockCmd</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hc32_ll_fcg.o(i.FCG_Fcg2PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FCG_Fcg2PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_A_Config
</UL>

<P><STRONG><a name="[10b]"></a>FCM_ClearStatus</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hc32_ll_fcm.o(i.FCM_ClearStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FCM_ClearStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_XTAL32_Init
</UL>

<P><STRONG><a name="[109]"></a>FCM_Cmd</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hc32_ll_fcm.o(i.FCM_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FCM_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_XTAL32_Init
</UL>

<P><STRONG><a name="[10c]"></a>FCM_DeInit</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, hc32_ll_fcm.o(i.FCM_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_XTAL32_Init
</UL>

<P><STRONG><a name="[10a]"></a>FCM_GetStatus</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hc32_ll_fcm.o(i.FCM_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FCM_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_XTAL32_Init
</UL>

<P><STRONG><a name="[108]"></a>FCM_Init</STRONG> (Thumb, 424 bytes, Stack size 16 bytes, hc32_ll_fcm.o(i.FCM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FCM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_XTAL32_Init
</UL>

<P><STRONG><a name="[107]"></a>FCM_StructInit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, hc32_ll_fcm.o(i.FCM_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_XTAL32_Init
</UL>

<P><STRONG><a name="[137]"></a>FLASH_APP_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, app_flash.o(i.FLASH_APP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_APP_Init &rArr; Flash_EraseFlashDriverInRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SetOperateFlashActiveJob
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SetNextDownloadStep
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_EraseFlashDriverInRAM
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MAIN_Init
</UL>

<P><STRONG><a name="[138]"></a>Flash_EraseFlashDriverInRAM</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, app_flash.o(i.Flash_EraseFlashDriverInRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Flash_EraseFlashDriverInRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_GetFlashDriverInfo
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_APP_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetECU
</UL>

<P><STRONG><a name="[14b]"></a>Flash_GetAPPVersion</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, app_flash.o(i.Flash_GetAPPVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Flash_GetAPPVersion &rArr; HAL_FLASH_ReadData_Extern &rArr; ReadFlashMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_ReadData_Extern
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataByIdentifier
</UL>

<P><STRONG><a name="[157]"></a>Flash_GetCurDownloadStep</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_flash.o(i.Flash_GetCurDownloadStep))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransferData
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RequestTransferExit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ProgramRegion
</UL>

<P><STRONG><a name="[14d]"></a>Flash_GetNewestAPPType</STRONG> (Thumb, 70 bytes, Stack size 96 bytes, app_flash.o(i.Flash_GetNewestAPPType))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Flash_GetNewestAPPType &rArr; DoCheckNewestAPPInfo &rArr; CRC_HAL_CreatSoftwareCrc &rArr; CreatSoftwareCrc16
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCheckNewestAPPInfo
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_GetAPPInfo_Info
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadNewestAppInfoFromFlash
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataByIdentifier
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteFlashAppInfo
</UL>

<P><STRONG><a name="[11f]"></a>Flash_GetResetHandlerAddr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_flash.o(i.Flash_GetResetHandlerAddr))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_JumpToAppOrNot
</UL>

<P><STRONG><a name="[150]"></a>Flash_InitDowloadInfo</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, app_flash.o(i.Flash_InitDowloadInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Flash_InitDowloadInfo &rArr; Flash_EraseFlashDriverInRAM_Inline
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SetOperateFlashActiveJob_Inline
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SetNextDownloadStep_Inline
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_EraseFlashDriverInRAM_Inline
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MainFun
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_OperateMainFunction
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransferData
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RequestTransferExit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RequestDownload
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ProgramRegion
</UL>

<P><STRONG><a name="[11c]"></a>Flash_IsAppInFlashValid</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, app_flash.o(i.Flash_IsAppInFlashValid))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_IsAPPValid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCheckProgrammingDependency
</UL>

<P><STRONG><a name="[11b]"></a>Flash_IsReadAppInfoFromFlashValid</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, app_flash.o(i.Flash_IsReadAppInfoFromFlashValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Flash_IsReadAppInfoFromFlashValid &rArr; ReadNewestAppInfoFromFlash &rArr; Flash_GetNewestAPPType &rArr; DoCheckNewestAPPInfo &rArr; CRC_HAL_CreatSoftwareCrc &rArr; CreatSoftwareCrc16
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_HAL_CreatSoftwareCrc
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadNewestAppInfoFromFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_IsAPPValid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCheckProgrammingDependency
</UL>

<P><STRONG><a name="[154]"></a>Flash_OperateMainFunction</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, app_flash.o(i.Flash_OperateMainFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Flash_OperateMainFunction &rArr; FlashErase &rArr; Flash_GetOldAPPType &rArr; DoCheckNewestAPPInfo &rArr; CRC_HAL_CreatSoftwareCrc &rArr; CreatSoftwareCrc16
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreOperateFlashActiveJob
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_GetOperateFlashActiveJob
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashErase
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashChecksum
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SetOperateFlashActiveJob
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_InitDowloadInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MAIN_Process
</UL>

<P><STRONG><a name="[156]"></a>Flash_ProgramRegion</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, app_flash.o(i.Flash_ProgramRegion))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Flash_ProgramRegion &rArr; Flash_InitDowloadInfo &rArr; Flash_EraseFlashDriverInRAM_Inline
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SavedFlashData
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFlashDriverSoftwareData
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SetOperateFlashActiveJob
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_InitDowloadInfo
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_GetCurDownloadStep
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransferData
</UL>

<P><STRONG><a name="[19b]"></a>Flash_SaveDownloadDataInfo</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_flash.o(i.Flash_SaveDownloadDataInfo))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RequestDownload
</UL>

<P><STRONG><a name="[15a]"></a>Flash_SaveFingerPrint</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, app_flash.o(i.Flash_SaveFingerPrint))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Flash_SaveFingerPrint &rArr; CRC_HAL_CreatSoftwareCrc &rArr; CreatSoftwareCrc16
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_HAL_CreatSoftwareCrc
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataByIdentifier
</UL>

<P><STRONG><a name="[19d]"></a>Flash_SavedReceivedCheckSumCrc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_flash.o(i.Flash_SavedReceivedCheckSumCrc))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoutineControl
</UL>

<P><STRONG><a name="[139]"></a>Flash_SetNextDownloadStep</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_flash.o(i.Flash_SetNextDownloadStep))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_APP_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransferData
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RequestTransferExit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RequestDownload
</UL>

<P><STRONG><a name="[131]"></a>Flash_SetOperateFlashActiveJob</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_flash.o(i.Flash_SetOperateFlashActiveJob))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Flash_SetOperateFlashActiveJob
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_OperateMainFunction
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_APP_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoEraseFlash
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCheckSum
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ProgramRegion
</UL>

<P><STRONG><a name="[15b]"></a>Flash_WriteFlashAppInfo</STRONG> (Thumb, 280 bytes, Stack size 64 bytes, app_flash.o(i.Flash_WriteFlashAppInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Flash_WriteFlashAppInfo &rArr; Flash_GetOldAPPType &rArr; DoCheckNewestAPPInfo &rArr; CRC_HAL_CreatSoftwareCrc &rArr; CreatSoftwareCrc16
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_HAL_CreatSoftwareCrc
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_GetOldAPPType
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_GetResetHandlerInfo
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_GetAPPInfo_Info
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_GetAPPInfo
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_GetNewestAPPType
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoutineControl
</UL>

<P><STRONG><a name="[e7]"></a>GPIO_AnalogCmd</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, hc32_ll_gpio.o(i.GPIO_AnalogCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_AnalogCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_XTAL32_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CLK_Init
</UL>

<P><STRONG><a name="[10e]"></a>GPIO_Init</STRONG> (Thumb, 460 bytes, Stack size 40 bytes, hc32_ll_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT615Init
</UL>

<P><STRONG><a name="[fe]"></a>GPIO_ReadInputPins</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, hc32_ll_gpio.o(i.GPIO_ReadInputPins), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_ReadInputPins
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_KEY_KEY10_IrqHandler
</UL>

<P><STRONG><a name="[160]"></a>GPIO_ResetPins</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, hc32_ll_gpio.o(i.GPIO_ResetPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_ResetPins
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fscbt615_Work_Mode_Set
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fscbt615_Trans_Mode_Set
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fscbt615_Reset_Set
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fscbt615_Power_Set
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fscbt615_Disconnect_Set
</UL>

<P><STRONG><a name="[16c]"></a>GPIO_SetFunc</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, hc32_ll_gpio.o(i.GPIO_SetFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[161]"></a>GPIO_SetPins</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, hc32_ll_gpio.o(i.GPIO_SetPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetPins
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fscbt615_Work_Mode_Set
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fscbt615_Trans_Mode_Set
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fscbt615_Reset_Set
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fscbt615_Disconnect_Set
</UL>

<P><STRONG><a name="[f0]"></a>GPIO_SetReadWaitCycle</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, hc32_ll_gpio.o(i.GPIO_SetReadWaitCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_SetReadWaitCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CLK_Init
</UL>

<P><STRONG><a name="[10d]"></a>GPIO_StructInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hc32_ll_gpio.o(i.GPIO_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT615Init
</UL>

<P><STRONG><a name="[16d]"></a>GetCanReadLen</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, multi_cyc_fifo.o(i.GetCanReadLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetCanReadLen &rArr; FindFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_ReadAFrameDataFromTP
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_CopyAFrameFromFifoToBuf
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataFromFifo
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_RxMsg
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTTP_DriverReadDataFromUARTTP
</UL>

<P><STRONG><a name="[16e]"></a>GetCanWriteLen</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, multi_cyc_fifo.o(i.GetCanWriteLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetCanWriteLen &rArr; FindFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_WriteAFrameDataInTP
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_CopyAFrameDataInRxFifo
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataInFifo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_TxMsg
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DriverWriteDataInUartTP
</UL>

<P><STRONG><a name="[1d6]"></a>GetUDSServiceInfo</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_uds_cfg.o(i.GetUDSServiceInfo))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MainFun
</UL>

<P><STRONG><a name="[16f]"></a>HAL_FLASH_APPAddrCheck</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, hal_flash_cfg.o(i.HAL_FLASH_APPAddrCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_FLASH_APPAddrCheck &rArr; HAL_FLASH_GetFlashConfigInfo_Inline
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_GetFlashConfigInfo_Inline
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MAIN_Init
</UL>

<P><STRONG><a name="[145]"></a>HAL_FLASH_Get1SectorBytes</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_flash_cfg.o(i.HAL_FLASH_Get1SectorBytes))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashErase
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_EraseSector
</UL>

<P><STRONG><a name="[15c]"></a>HAL_FLASH_GetAPPInfo</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, hal_flash_cfg.o(i.HAL_FLASH_GetAPPInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_FLASH_GetAPPInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteFlashAppInfo
</UL>

<P><STRONG><a name="[14e]"></a>HAL_FLASH_GetAPPInfo_Info</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, hal_flash_cfg.o(i.HAL_FLASH_GetAPPInfo_Info))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_FLASH_GetAPPInfo_Info
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadNewestAppInfoFromFlash
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_GetOldAPPType
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteFlashAppInfo
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_GetNewestAPPType
</UL>

<P><STRONG><a name="[140]"></a>HAL_FLASH_GetEraseFlashASectorMaxTimeMs</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_flash_cfg.o(i.HAL_FLASH_GetEraseFlashASectorMaxTimeMs))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashErase
</UL>

<P><STRONG><a name="[142]"></a>HAL_FLASH_GetFlashConfigInfo</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hal_flash_cfg.o(i.HAL_FLASH_GetFlashConfigInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_FLASH_GetFlashConfigInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashErase
</UL>

<P><STRONG><a name="[fd]"></a>HAL_FLASH_GetFlashDriverInfo</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_flash_cfg.o(i.HAL_FLASH_GetFlashDriverInfo))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitFlashAPI
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFlashDriverSoftwareData
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_EraseFlashDriverInRAM_Inline
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_EraseFlashDriverInRAM
</UL>

<P><STRONG><a name="[144]"></a>HAL_FLASH_GetFlashLengthToSectors</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, hal_flash_cfg.o(i.HAL_FLASH_GetFlashLengthToSectors))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_FLASH_GetFlashLengthToSectors
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashErase
</UL>

<P><STRONG><a name="[15d]"></a>HAL_FLASH_GetResetHandlerInfo</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, hal_flash_cfg.o(i.HAL_FLASH_GetResetHandlerInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_FLASH_GetResetHandlerInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_IsEnableStorageResetHandlerInFlash
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_GetStorageRestHandlerAddr
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_GetResetHandlerLen
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteFlashAppInfo
</UL>

<P><STRONG><a name="[143]"></a>HAL_FLASH_GetTotalSectors</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, hal_flash_cfg.o(i.HAL_FLASH_GetTotalSectors))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_FLASH_GetTotalSectors &rArr; HAL_FLASH_GetFlashLengthToSectors_Inline
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_GetFlashLengthToSectors_Inline
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_GetFlashConfigInfo_Inline
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashErase
</UL>

<P><STRONG><a name="[14c]"></a>HAL_FLASH_ReadData_Extern</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, hal_flash.o(i.HAL_FLASH_ReadData_Extern))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_FLASH_ReadData_Extern &rArr; ReadFlashMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_GetAPPVersion
</UL>

<P><STRONG><a name="[13d]"></a>HAL_FLASH_RegisterFlashAPI</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hal_flash.o(i.HAL_FLASH_RegisterFlashAPI))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashChecksum
</UL>

<P><STRONG><a name="[146]"></a>HAL_FLASH_SectorNumberToFlashAddress</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, hal_flash_cfg.o(i.HAL_FLASH_SectorNumberToFlashAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_FLASH_SectorNumberToFlashAddress &rArr; HAL_FLASH_GetTotalSectors_Inline &rArr; HAL_FLASH_GetFlashLengthToSectors_Inline
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_GetTotalSectors_Inline
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_GetFlashConfigInfo_Inline
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashErase
</UL>

<P><STRONG><a name="[134]"></a>HAL_SW_RESTT</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_wdt.o(i.HAL_SW_RESTT))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_SW_RESTT &rArr; BSP_SW_RESTT &rArr; WDT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SW_RESTT
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoResetMCU
</UL>

<P><STRONG><a name="[ab]"></a>HAL_TP_DoTxMsgSuccesfulCallback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_tp.o(i.HAL_TP_DoTxMsgSuccesfulCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TP_DoTxMsgSuccesfulCallback &rArr; HAL_UARTTP_DoTxMsgSuccessfulCallBack
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTTP_DoTxMsgSuccessfulCallBack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.SendMsgMainFun)
</UL>
<P><STRONG><a name="[17c]"></a>HAL_TP_DriverReadDataFromTP</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, hal_tp_cfg.o(i.HAL_TP_DriverReadDataFromTP))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HAL_TP_DriverReadDataFromTP &rArr; HAL_UARTTP_DriverReadDataFromUARTTP &rArr; ReadDataFromFifo &rArr; GetCanReadLen &rArr; FindFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTTP_DriverReadDataFromUARTTP
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgMainFun
</UL>

<P><STRONG><a name="[17a]"></a>HAL_TP_DriverWriteDataInTP</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, hal_tp_cfg.o(i.HAL_TP_DriverWriteDataInTP))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HAL_TP_DriverWriteDataInTP &rArr; HAL_UART_DriverWriteDataInUartTP &rArr; WriteDataInFifo &rArr; GetCanWriteLen &rArr; FindFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DriverWriteDataInUartTP
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RxUartMsgMainFun
</UL>

<P><STRONG><a name="[17f]"></a>HAL_TP_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_tp.o(i.HAL_TP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_TP_Init &rArr; Hal_UartInit &rArr; ApplyFifo &rArr; FindFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_UartInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MAIN_Init
</UL>

<P><STRONG><a name="[f7]"></a>HAL_TP_MainFun</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_tp.o(i.HAL_TP_MainFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_TP_MainFun &rArr; HAL_UARTTP_MainFun &rArr; UARTTP_DoRegisterTxMsgCallBack
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTTP_MainFun
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MAIN_Process
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[182]"></a>HAL_TP_SystemTickCtl</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_tp.o(i.HAL_TP_SystemTickCtl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TP_SystemTickCtl
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTTP_SytstemTickControl
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MAIN_Process
</UL>

<P><STRONG><a name="[17b]"></a>HAL_UARTTP_DoTxMsgSuccessfulCallBack</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hal_uart_tp_cfg.o(i.HAL_UARTTP_DoTxMsgSuccessfulCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UARTTP_DoTxMsgSuccessfulCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TP_DoTxMsgSuccesfulCallback
</UL>

<P><STRONG><a name="[17d]"></a>HAL_UARTTP_DriverReadDataFromUARTTP</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, hal_uart_tp_cfg.o(i.HAL_UARTTP_DriverReadDataFromUARTTP))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_UARTTP_DriverReadDataFromUARTTP &rArr; ReadDataFromFifo &rArr; GetCanReadLen &rArr; FindFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataFromFifo
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCanReadLen
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TP_DriverReadDataFromTP
</UL>

<P><STRONG><a name="[1b4]"></a>HAL_UARTTP_GetConfigRxMsgFUNID</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_uart_tp_cfg.o(i.HAL_UARTTP_GetConfigRxMsgFUNID))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_GetConfigRxMsgFUNID
</UL>

<P><STRONG><a name="[1b5]"></a>HAL_UARTTP_GetConfigRxMsgPHYID</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_uart_tp_cfg.o(i.HAL_UARTTP_GetConfigRxMsgPHYID))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_GetConfigRxMsgPHYID
</UL>

<P><STRONG><a name="[1b6]"></a>HAL_UARTTP_GetConfigTxMsgID</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_uart_tp_cfg.o(i.HAL_UARTTP_GetConfigTxMsgID))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_GetConfigTxMsgID
</UL>

<P><STRONG><a name="[185]"></a>HAL_UARTTP_IsReceivedMsgIDValid_Extern</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_uart_tp_cfg.o(i.HAL_UARTTP_IsReceivedMsgIDValid_Extern))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTTP_MainFun
</UL>

<P><STRONG><a name="[181]"></a>HAL_UARTTP_MainFun</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, hal_uart_tp.o(i.HAL_UARTTP_MainFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_UARTTP_MainFun &rArr; UARTTP_DoRegisterTxMsgCallBack
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_DoRegisterTxMsgCallBack
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTTP_IsReceivedMsgIDValid_Extern
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TP_MainFun
</UL>

<P><STRONG><a name="[1b9]"></a>HAL_UARTTP_RegisterAbortTxMsg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_uart_tp_cfg.o(i.HAL_UARTTP_RegisterAbortTxMsg))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_RegisterAbortTxMsg
</UL>

<P><STRONG><a name="[183]"></a>HAL_UARTTP_SytstemTickControl</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, hal_uart_tp.o(i.HAL_UARTTP_SytstemTickControl))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TP_SystemTickCtl
</UL>

<P><STRONG><a name="[17e]"></a>HAL_UART_DriverWriteDataInUartTP</STRONG> (Thumb, 106 bytes, Stack size 104 bytes, hal_uart_tp_cfg.o(i.HAL_UART_DriverWriteDataInUartTP))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HAL_UART_DriverWriteDataInUartTP &rArr; WriteDataInFifo &rArr; GetCanWriteLen &rArr; FindFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataInFifo
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCanWriteLen
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TP_DriverWriteDataInTP
</UL>

<P><STRONG><a name="[f8]"></a>HAL_WDT_Config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_wdt.o(i.HAL_WDT_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_WDT_Config &rArr; WDT_Config &rArr; WDT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[f9]"></a>HAL_WDT_FeedDog</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_wdt.o(i.HAL_WDT_FeedDog))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_WDT_FeedDog &rArr; BSP_WDT_FeedDog
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_WDT_FeedDog
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MAIN_Process
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashErase
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashChecksum
</UL>

<P><STRONG><a name="[180]"></a>Hal_UartInit</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, hal_uart.o(i.Hal_UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Hal_UartInit &rArr; ApplyFifo &rArr; FindFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterFrameReceivedCallback
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplyFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TP_Init
</UL>

<P><STRONG><a name="[15e]"></a>Hal_Uart_Receive</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hal_uart.o(i.Hal_Uart_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Hal_Uart_Receive &rArr; Uart_Rx_Message &rArr; Compare_Received_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Rx_Message
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrameReceivedCallbackHandler
</UL>

<P><STRONG><a name="[18b]"></a>Hal_Uart_Send</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, hal_uart.o(i.Hal_Uart_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Hal_Uart_Send &rArr; USART_SendMessage &rArr; USART_UART_Trans &rArr; USART_WaitStatus &rArr; USART_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendMessage
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUARTTranmittedStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgMainFun
</UL>

<P><STRONG><a name="[18f]"></a>INTC_IrqSignIn</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, hc32_ll_interrupts.o(i.INTC_IrqSignIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = INTC_IrqSignIn
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_A_Config
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_IrqInstalHandler
</UL>

<P><STRONG><a name="[a]"></a>IRQ000_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ000_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ000_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>IRQ001_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ001_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ001_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>IRQ002_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ002_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ002_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>IRQ003_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ003_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ003_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>IRQ004_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ004_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ004_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>IRQ005_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ005_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ005_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>IRQ006_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ006_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ006_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>IRQ007_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ007_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ007_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>IRQ008_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ008_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ008_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>IRQ009_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ009_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ009_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>IRQ010_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ010_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ010_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>IRQ011_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ011_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ011_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>IRQ012_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ012_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ012_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>IRQ013_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ013_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ013_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>IRQ014_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ014_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ014_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>IRQ015_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ015_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ015_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>IRQ016_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ016_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ016_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>IRQ017_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ017_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ017_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>IRQ018_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ018_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ018_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>IRQ019_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ019_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ019_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>IRQ020_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ020_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ020_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>IRQ021_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ021_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ021_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>IRQ022_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ022_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ022_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>IRQ023_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ023_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ023_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>IRQ024_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ024_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ024_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>IRQ025_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ025_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ025_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>IRQ026_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ026_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ026_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>IRQ027_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ027_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ027_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>IRQ028_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ028_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ028_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>IRQ029_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ029_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ029_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>IRQ030_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ030_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ030_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>IRQ031_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ031_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ031_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>IRQ032_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ032_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ032_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>IRQ033_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ033_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ033_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>IRQ034_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ034_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ034_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>IRQ035_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ035_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ035_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>IRQ036_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ036_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ036_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>IRQ037_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ037_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ037_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>IRQ038_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ038_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ038_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>IRQ039_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ039_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ039_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>IRQ040_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ040_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ040_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>IRQ041_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ041_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ041_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>IRQ042_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ042_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ042_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>IRQ043_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ043_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ043_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>IRQ044_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ044_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ044_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>IRQ045_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ045_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ045_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>IRQ046_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ046_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ046_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>IRQ047_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ047_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ047_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>IRQ048_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ048_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ048_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>IRQ049_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ049_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ049_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>IRQ050_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ050_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ050_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>IRQ051_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ051_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ051_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>IRQ052_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ052_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ052_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>IRQ053_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ053_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ053_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>IRQ054_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ054_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ054_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>IRQ055_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ055_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ055_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>IRQ056_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ056_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ056_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>IRQ057_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ057_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ057_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>IRQ058_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ058_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ058_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>IRQ059_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ059_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ059_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>IRQ060_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ060_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ060_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>IRQ061_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ061_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ061_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>IRQ062_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ062_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ062_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>IRQ063_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ063_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ063_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>IRQ064_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ064_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ064_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>IRQ065_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ065_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ065_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>IRQ066_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ066_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ066_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>IRQ067_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ067_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ067_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>IRQ068_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ068_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ068_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>IRQ069_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ069_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ069_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>IRQ070_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ070_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ070_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>IRQ071_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ071_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ071_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>IRQ072_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ072_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ072_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>IRQ073_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ073_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ073_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>IRQ074_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ074_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ074_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>IRQ075_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ075_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ075_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>IRQ076_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ076_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ076_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>IRQ077_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ077_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ077_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>IRQ078_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ078_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ078_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>IRQ079_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ079_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ079_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>IRQ080_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ080_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ080_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>IRQ081_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ081_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ081_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>IRQ082_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ082_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ082_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>IRQ083_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ083_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ083_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>IRQ084_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ084_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ084_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>IRQ085_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ085_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ085_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>IRQ086_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ086_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ086_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>IRQ087_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ087_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ087_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>IRQ088_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ088_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ088_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>IRQ089_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ089_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ089_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>IRQ090_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ090_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ090_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>IRQ091_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ091_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ091_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>IRQ092_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ092_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ092_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>IRQ093_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ093_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ093_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>IRQ094_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ094_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ094_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>IRQ095_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ095_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ095_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>IRQ096_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ096_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ096_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>IRQ097_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ097_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ097_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>IRQ098_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ098_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ098_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>IRQ099_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ099_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ099_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>IRQ100_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ100_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ100_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>IRQ101_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ101_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ101_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>IRQ102_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ102_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ102_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>IRQ103_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ103_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ103_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>IRQ104_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ104_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ104_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>IRQ105_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ105_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ105_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>IRQ106_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ106_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ106_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>IRQ107_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ107_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ107_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>IRQ108_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ108_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ108_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>IRQ109_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ109_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ109_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>IRQ110_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ110_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ110_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>IRQ111_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ111_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ111_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>IRQ112_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ112_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ112_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>IRQ113_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ113_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ113_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>IRQ114_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ114_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ114_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>IRQ115_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ115_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ115_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>IRQ116_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ116_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ116_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>IRQ117_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ117_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ117_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>IRQ118_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ118_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ118_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>IRQ119_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ119_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ119_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>IRQ120_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ120_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ120_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>IRQ121_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ121_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ121_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>IRQ122_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ122_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ122_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>IRQ123_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ123_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ123_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>IRQ124_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ124_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ124_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>IRQ125_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ125_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ125_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>IRQ126_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ126_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ126_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>IRQ127_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ127_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ127_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[1d5]"></a>IsCurDefaultSession</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_uds_cfg.o(i.IsCurDefaultSession))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MainFun
</UL>

<P><STRONG><a name="[1d7]"></a>IsCurRxIdCanRequest</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_uds_cfg.o(i.IsCurRxIdCanRequest))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MainFun
</UL>

<P><STRONG><a name="[1d9]"></a>IsCurSecurityLevelRequet</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_uds_cfg.o(i.IsCurSecurityLevelRequet))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MainFun
</UL>

<P><STRONG><a name="[1d8]"></a>IsCurSeesionCanRequest</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_uds_cfg.o(i.IsCurSeesionCanRequest))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MainFun
</UL>

<P><STRONG><a name="[117]"></a>IsRequestEnterBootloader</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_boot_cfg.o(i.IsRequestEnterBootloader))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IsRequestEnterBootloader &rArr; Boot_IsInfoValid &rArr; Boot_CalculateInfoCRC &rArr; CRC_HAL_CreatSoftwareCrc &rArr; CreatSoftwareCrc16
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_IsInfoValid
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_JumpToAppOrNot
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_CheckReqBootloaderMode
</UL>

<P><STRONG><a name="[1d3]"></a>IsS3ServerTimeout</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, app_uds_cfg.o(i.IsS3ServerTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MainFun
</UL>

<P><STRONG><a name="[f3]"></a>LL_PERIPH_WE</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, hc32_ll.o(i.LL_PERIPH_WE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_PERIPH_WE
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_REG_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[fb]"></a>LL_PERIPH_WP</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, hc32_ll.o(i.LL_PERIPH_WP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_PERIPH_WP
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_REG_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[f1]"></a>PWC_HighSpeedToHighPerformance</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, hc32_ll_pwc.o(i.PWC_HighSpeedToHighPerformance))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWC_HighSpeedToHighPerformance &rArr; DDL_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_DelayUS
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CLK_Init
</UL>

<P><STRONG><a name="[184]"></a>ReadDataFromFifo</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, multi_cyc_fifo.o(i.ReadDataFromFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ReadDataFromFifo &rArr; GetCanReadLen &rArr; FindFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFifo
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCanReadLen
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_ReadAFrameDataFromTP
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_CopyAFrameFromFifoToBuf
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_RxMsg
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTTP_DriverReadDataFromUARTTP
</UL>

<P><STRONG><a name="[177]"></a>ReadFlashMemory</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, flash.o(i.ReadFlashMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ReadFlashMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ReadFlashByte
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_ReadData_Extern
</UL>

<P><STRONG><a name="[189]"></a>RegisterFrameReceivedCallback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i.RegisterFrameReceivedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_UartInit
</UL>

<P><STRONG><a name="[12d]"></a>RestartS3Server</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_uds_cfg.o(i.RestartS3Server))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MainFun
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TXConfrimMsgCallback
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoutineControl
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RequestMoreTimeCallback
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigSession
</UL>

<P><STRONG><a name="[ee]"></a>SRAM_SetWaitCycle</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, hc32_ll_sram.o(i.SRAM_SetWaitCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SRAM_SetWaitCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CLK_Init
</UL>

<P><STRONG><a name="[19e]"></a>SaveRequestIdType</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, app_uds_cfg.o(i.SaveRequestIdType))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SaveRequestIdType &rArr; TP_GetConfigRxMsgPHYID
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_GetConfigRxMsgPHYID
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_GetConfigRxMsgFUNID
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MainFun
</UL>

<P><STRONG><a name="[1a3]"></a>SendMsgMainFun</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, main.o(i.SendMsgMainFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SendMsgMainFun &rArr; HAL_TP_DriverReadDataFromTP &rArr; HAL_UARTTP_DriverReadDataFromUARTTP &rArr; ReadDataFromFifo &rArr; GetCanReadLen &rArr; FindFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart_Send
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TP_DriverReadDataFromTP
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_DelayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12c]"></a>SetCurrentSession</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_uds_cfg.o(i.SetCurrentSession))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MainFun
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TXConfrimMsgCallback
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigSession
</UL>

<P><STRONG><a name="[19c]"></a>SetDownloadAppSuccessful</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, app_boot_cfg.o(i.SetDownloadAppSuccessful))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SetDownloadAppSuccessful &rArr; Boot_CalculateInfoCRC &rArr; CRC_HAL_CreatSoftwareCrc &rArr; CreatSoftwareCrc16
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_CalculateInfoCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetECU
</UL>

<P><STRONG><a name="[1d4]"></a>SetIsRxUdsMsg</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_uds_cfg.o(i.SetIsRxUdsMsg))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MainFun
</UL>

<P><STRONG><a name="[12b]"></a>SetNegativeErroCode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_uds_cfg.o(i.SetNegativeErroCode))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MainFun
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataByIdentifier
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransferData
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecurityAccess
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoutineControl
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RequestTransferExit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RequestMoreTime
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RequestDownload
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataByIdentifier
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigSession
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlDTCSetting
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommunicationControl
</UL>

<P><STRONG><a name="[1a2]"></a>SetSecurityLevel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_uds_cfg.o(i.SetSecurityLevel))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MainFun
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TXConfrimMsgCallback
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecurityAccess
</UL>

<P><STRONG><a name="[124]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, system_hc32f460.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysClockSrc
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetClockDiv
</UL>

<P><STRONG><a name="[9b]"></a>SystemInit</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, system_hc32f460.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(.text)
</UL>
<P><STRONG><a name="[1b1]"></a>TIMER0_GetTimerTickCnt</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, time.o(i.TIMER0_GetTimerTickCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIMER0_GetTimerTickCnt &rArr; TMR0_GetCountValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_GetCountValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_ALG_GetRandom
</UL>

<P><STRONG><a name="[1ab]"></a>TMR0_ClearStatus</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, hc32_ll_tmr0.o(i.TMR0_ClearStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMR0_ClearStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_A_CompareIrqCallback
</UL>

<P><STRONG><a name="[1b2]"></a>TMR0_GetCountValue</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, hc32_ll_tmr0.o(i.TMR0_GetCountValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMR0_GetCountValue
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_GetTimerTickCnt
</UL>

<P><STRONG><a name="[1af]"></a>TMR0_HWStopCondCmd</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, hc32_ll_tmr0.o(i.TMR0_HWStopCondCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMR0_HWStopCondCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_A_Config
</UL>

<P><STRONG><a name="[1ae]"></a>TMR0_Init</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, hc32_ll_tmr0.o(i.TMR0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TMR0_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_A_Config
</UL>

<P><STRONG><a name="[1b0]"></a>TMR0_IntCmd</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, hc32_ll_tmr0.o(i.TMR0_IntCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMR0_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_A_Config
</UL>

<P><STRONG><a name="[1b3]"></a>TMR0_Start</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, hc32_ll_tmr0.o(i.TMR0_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMR0_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Init_Template
</UL>

<P><STRONG><a name="[1ad]"></a>TMR0_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hc32_ll_tmr0.o(i.TMR0_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_A_Config
</UL>

<P><STRONG><a name="[1c3]"></a>TP_DoTransmittedAFrameMsgCallBack</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hal_tp_cfg.o(i.TP_DoTransmittedAFrameMsgCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TP_DoTransmittedAFrameMsgCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_DoWaitingTxMsg
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_DoTransmitSFCallBack
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_DoTransmitCFCallBack
</UL>

<P><STRONG><a name="[1a0]"></a>TP_GetConfigRxMsgFUNID</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_tp_cfg.o(i.TP_GetConfigRxMsgFUNID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TP_GetConfigRxMsgFUNID
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTTP_GetConfigRxMsgFUNID
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveRequestIdType
</UL>

<P><STRONG><a name="[19f]"></a>TP_GetConfigRxMsgPHYID</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_tp_cfg.o(i.TP_GetConfigRxMsgPHYID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TP_GetConfigRxMsgPHYID
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTTP_GetConfigRxMsgPHYID
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveRequestIdType
</UL>

<P><STRONG><a name="[132]"></a>TP_GetConfigTxMsgID</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_tp_cfg.o(i.TP_GetConfigTxMsgID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TP_GetConfigTxMsgID
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTTP_GetConfigTxMsgID
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_WriteAFrameDataInTP
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MainFun
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_TxMsgToHost
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RequestMoreTime
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoResponseChecksum
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoEraseFlashResponse
</UL>

<P><STRONG><a name="[1b7]"></a>TP_ReadAFrameDataFromTP</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, hal_tp.o(i.TP_ReadAFrameDataFromTP))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TP_ReadAFrameDataFromTP &rArr; ReadDataFromFifo &rArr; GetCanReadLen &rArr; FindFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataFromFifo
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCanReadLen
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MainFun
</UL>

<P><STRONG><a name="[1b8]"></a>TP_RegisterAbortTxMsg</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hal_tp_cfg.o(i.TP_RegisterAbortTxMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TP_RegisterAbortTxMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTTP_RegisterAbortTxMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MAIN_Init
</UL>

<P><STRONG><a name="[1bd]"></a>TP_RegisterTransmittedAFrmaeMsgCallBack</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_tp_cfg.o(i.TP_RegisterTransmittedAFrmaeMsgCallBack))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_DoUartTpIdle
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_CopyAFrameFromFifoToBuf
</UL>

<P><STRONG><a name="[133]"></a>TP_WriteAFrameDataInTP</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, hal_tp.o(i.TP_WriteAFrameDataInTP))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TP_WriteAFrameDataInTP &rArr; WriteDataInFifo &rArr; GetCanWriteLen &rArr; FindFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataInFifo
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCanWriteLen
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_GetConfigTxMsgID
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MainFun
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_TxMsgToHost
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RequestMoreTime
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoResponseChecksum
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoEraseFlashResponse
</UL>

<P><STRONG><a name="[fa]"></a>Timer0_Init_Template</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, time.o(i.Timer0_Init_Template))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Timer0_Init_Template &rArr; TIM0_A_Config &rArr; TMR0_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_DelayMS
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_Start
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_A_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[1d2]"></a>UDS_ALG_AddSWTimerTickCnt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_uds_alg.o(i.UDS_ALG_AddSWTimerTickCnt))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MainFun
</UL>

<P><STRONG><a name="[195]"></a>UDS_ALG_DecryptData</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, app_uds_alg.o(i.UDS_ALG_DecryptData))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = UDS_ALG_DecryptData &rArr; deAes &rArr; deMixColumns &rArr; GFMul &rArr; GFMul14 &rArr; GFMul12 &rArr; GFMul8 &rArr; GFMul4
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deAes
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsReceivedKeyRight
</UL>

<P><STRONG><a name="[1a1]"></a>UDS_ALG_GetRandom</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, app_uds_alg.o(i.UDS_ALG_GetRandom))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UDS_ALG_GetRandom &rArr; TIMER0_GetTimerTickCnt &rArr; TMR0_GetCountValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_GetTimerTickCnt
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsl_srand
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsl_rand
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecurityAccess
</UL>

<P><STRONG><a name="[1ca]"></a>UDS_ALG_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_uds_alg.o(i.UDS_ALG_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_Init
</UL>

<P><STRONG><a name="[13f]"></a>UDS_GetUDSS3WatermarkTimerMs</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, app_uds_cfg.o(i.UDS_GetUDSS3WatermarkTimerMs))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashErase
</UL>

<P><STRONG><a name="[1c9]"></a>UDS_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_uds.o(i.UDS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UDS_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_ALG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MAIN_Init
</UL>

<P><STRONG><a name="[1cb]"></a>UDS_MAIN_Init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, app_bootloader.o(i.UDS_MAIN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = UDS_MAIN_Init &rArr; Boot_CheckReqBootloaderMode &rArr; UDS_TxMsgToHost &rArr; TP_WriteAFrameDataInTP &rArr; WriteDataInFifo &rArr; GetCanWriteLen &rArr; FindFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_HAL_Init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TP_Init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_RegisterAbortTxMsg
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_APP_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_JumpToAppOrNot
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_CheckReqBootloaderMode
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_APPAddrCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1cd]"></a>UDS_MAIN_Process</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, app_bootloader.o(i.UDS_MAIN_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = UDS_MAIN_Process &rArr; UDS_MainFun &rArr; TP_WriteAFrameDataInTP &rArr; WriteDataInFifo &rArr; GetCanWriteLen &rArr; FindFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_WDT_FeedDog
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TP_MainFun
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIMER_Is1msTickTimeout
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIMER_Is100msTickTimeout
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TP_SystemTickCtl
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_SystemTickCtl
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MainFun
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_OperateMainFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d1]"></a>UDS_MainFun</STRONG> (Thumb, 312 bytes, Stack size 1064 bytes, app_uds.o(i.UDS_MainFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = UDS_MainFun &rArr; TP_WriteAFrameDataInTP &rArr; WriteDataInFifo &rArr; GetCanWriteLen &rArr; FindFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_WriteAFrameDataInTP
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_ReadAFrameDataFromTP
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_GetConfigTxMsgID
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_ALG_AddSWTimerTickCnt
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSecurityLevel
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNegativeErroCode
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIsRxUdsMsg
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurrentSession
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveRequestIdType
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartS3Server
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsS3ServerTimeout
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCurSeesionCanRequest
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCurSecurityLevelRequet
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCurRxIdCanRequest
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCurDefaultSession
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUDSServiceInfo
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_InitDowloadInfo
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MAIN_Process
</UL>

<P><STRONG><a name="[1cf]"></a>UDS_SystemTickCtl</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, app_uds_cfg.o(i.UDS_SystemTickCtl))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UDS_SystemTickCtl &rArr; DoResetMCU &rArr; HAL_SW_RESTT &rArr; BSP_SW_RESTT &rArr; WDT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubUdsSecurityReqLockTime
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubUdsS3ServerTime
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRxUdsMsg
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUdsSecurityReqLockTime
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUdsS3ServerTime
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoResetMCU
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MAIN_Process
</UL>

<P><STRONG><a name="[119]"></a>UDS_TxMsgToHost</STRONG> (Thumb, 70 bytes, Stack size 1048 bytes, app_uds_cfg.o(i.UDS_TxMsgToHost))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = UDS_TxMsgToHost &rArr; TP_WriteAFrameDataInTP &rArr; WriteDataInFifo &rArr; GetCanWriteLen &rArr; FindFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_WriteAFrameDataInTP
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_GetConfigTxMsgID
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_CheckReqBootloaderMode
</UL>

<P><STRONG><a name="[1df]"></a>USART_ClearStatus</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, hc32_ll_usart.o(i.USART_ClearStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_ClearStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RxError_IrqCallback
</UL>

<P><STRONG><a name="[1e0]"></a>USART_FuncCmd</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, hc32_ll_usart.o(i.USART_FuncCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_FuncCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[1e1]"></a>USART_GetStatus</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, hc32_ll_usart.o(i.USART_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WaitStatus
</UL>

<P><STRONG><a name="[1e4]"></a>USART_ReadData</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hc32_ll_usart.o(i.USART_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RxFull_IrqCallback
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RxError_IrqCallback
</UL>

<P><STRONG><a name="[18c]"></a>USART_SendMessage</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, uart.o(i.USART_SendMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USART_SendMessage &rArr; USART_UART_Trans &rArr; USART_WaitStatus &rArr; USART_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_Trans
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart_Send
</UL>

<P><STRONG><a name="[1e6]"></a>USART_SetBaudrate</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, hc32_ll_usart.o(i.USART_SetBaudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = USART_SetBaudrate &rArr; SmartCard_CalculateBrr &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetUsartClockFreq
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CalculateBrr
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartCard_CalculateBrr
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSync_CalculateBrr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_Init
</UL>

<P><STRONG><a name="[1e7]"></a>USART_UART_Init</STRONG> (Thumb, 436 bytes, Stack size 32 bytes, hc32_ll_usart.o(i.USART_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = USART_UART_Init &rArr; USART_SetBaudrate &rArr; SmartCard_CalculateBrr &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[1ea]"></a>USART_UART_StructInit</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, hc32_ll_usart.o(i.USART_UART_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[1e5]"></a>USART_UART_Trans</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, hc32_ll_usart.o(i.USART_UART_Trans))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USART_UART_Trans &rArr; USART_WaitStatus &rArr; USART_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WaitStatus
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendMessage
</UL>

<P><STRONG><a name="[1e9]"></a>USART_WriteData</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, hc32_ll_usart.o(i.USART_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_Trans
</UL>

<P><STRONG><a name="[f5]"></a>Uart_Init</STRONG> (Thumb, 140 bytes, Stack size 56 bytes, uart.o(i.Uart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Uart_Init &rArr; USART_UART_Init &rArr; USART_SetBaudrate &rArr; SmartCard_CalculateBrr &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFunc
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg1PeriphClockCmd
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_IrqInstalHandler
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_StructInit
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_Init
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[18a]"></a>Uart_Rx_Message</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uart.o(i.Uart_Rx_Message))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Uart_Rx_Message &rArr; Compare_Received_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compare_Received_Data
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart_Receive
</UL>

<P><STRONG><a name="[188]"></a>WDT_Config</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, wdt.o(i.WDT_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WDT_Config &rArr; WDT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_WDT_Config
</UL>

<P><STRONG><a name="[dd]"></a>WDT_FeedDog</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32_ll_wdt.o(i.WDT_FeedDog))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_WDT_FeedDog
</UL>

<P><STRONG><a name="[101]"></a>WDT_Init</STRONG> (Thumb, 338 bytes, Stack size 16 bytes, hc32_ll_wdt.o(i.WDT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WDT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Config
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SW_RESTT
</UL>

<P><STRONG><a name="[187]"></a>WriteDataInFifo</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, multi_cyc_fifo.o(i.WriteDataInFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WriteDataInFifo &rArr; GetCanWriteLen &rArr; FindFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFifo
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCanWriteLen
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_WriteAFrameDataInTP
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_CopyAFrameDataInRxFifo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_TxMsg
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DriverWriteDataInUartTP
</UL>

<P><STRONG><a name="[20d]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[20e]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[20f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1c6]"></a>deAes</STRONG> (Thumb, 166 bytes, Stack size 160 bytes, aes.o(i.deAes))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = deAes &rArr; deMixColumns &rArr; GFMul &rArr; GFMul14 &rArr; GFMul12 &rArr; GFMul8 &rArr; GFMul4
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getArrayFrom4W
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extendKey
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deSubBytes
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deShiftRows
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deMixColumns
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertToIntArray
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertArrayToStr
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkKeyLen
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addRoundTowArray
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addRoundKey
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_ALG_DecryptData
</UL>

<P><STRONG><a name="[9a]"></a>main</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = main &rArr; UDS_MAIN_Process &rArr; UDS_MainFun &rArr; TP_WriteAFrameDataInTP &rArr; WriteDataInFifo &rArr; GetCanWriteLen &rArr; FindFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MAIN_Process
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MAIN_Init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgMainFun
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[b5]"></a>BSP_AbortCANTxMsg</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.BSP_AbortCANTxMsg))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[b6]"></a>BSP_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(i.BSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = BSP_Init &rArr; Uart_Init &rArr; USART_UART_Init &rArr; USART_SetBaudrate &rArr; SmartCard_CalculateBrr &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Init_Template
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WP
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WE
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_WDT_FeedDog
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_WDT_Config
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TP_MainFun
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT615Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_XTAL32_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CLK_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[197]"></a>PWC_REG_Lock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hc32_ll.o(i.PWC_REG_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WP
</UL>

<P><STRONG><a name="[196]"></a>PWC_REG_Unlock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32_ll.o(i.PWC_REG_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WE
</UL>

<P><STRONG><a name="[122]"></a>CLK_WaitStable</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, hc32_ll_clk.o(i.CLK_WaitStable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CLK_WaitStable &rArr; CLK_GetStableStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetStableStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLCmd
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalCmd
</UL>

<P><STRONG><a name="[123]"></a>SetSysClockDiv</STRONG> (Thumb, 746 bytes, Stack size 32 bytes, hc32_ll_clk.o(i.SetSysClockDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SetSysClockDiv &rArr; DDL_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_DelayUS
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetClockDiv
</UL>

<P><STRONG><a name="[125]"></a>SetSysClockSrc</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, hc32_ll_clk.o(i.SetSysClockSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SetSysClockSrc &rArr; DDL_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_DelayUS
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysClockSrc
</UL>

<P><STRONG><a name="[12a]"></a>ClockSync_CalculateBrr</STRONG> (Thumb, 464 bytes, Stack size 104 bytes, hc32_ll_usart.o(i.ClockSync_CalculateBrr))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ClockSync_CalculateBrr &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>

<P><STRONG><a name="[1a5]"></a>SmartCard_CalculateBrr</STRONG> (Thumb, 568 bytes, Stack size 120 bytes, hc32_ll_usart.o(i.SmartCard_CalculateBrr))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SmartCard_CalculateBrr &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>

<P><STRONG><a name="[1c5]"></a>UART_CalculateBrr</STRONG> (Thumb, 580 bytes, Stack size 112 bytes, hc32_ll_usart.o(i.UART_CalculateBrr))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = UART_CalculateBrr &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>

<P><STRONG><a name="[1e3]"></a>USART_GetBusClockFreq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32_ll_usart.o(i.USART_GetBusClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetUsartClockFreq
</UL>

<P><STRONG><a name="[1e2]"></a>USART_GetUsartClockFreq</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, hc32_ll_usart.o(i.USART_GetUsartClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_GetUsartClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetBusClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>

<P><STRONG><a name="[1e8]"></a>USART_WaitStatus</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, hc32_ll_usart.o(i.USART_WaitStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART_WaitStatus &rArr; USART_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_Trans
</UL>

<P><STRONG><a name="[1eb]"></a>Compare_Received_Data</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, uart.o(i.Compare_Received_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Compare_Received_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Rx_Message
</UL>

<P><STRONG><a name="[18e]"></a>INTC_IrqInstalHandler</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, uart.o(i.INTC_IrqInstalHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = INTC_IrqInstalHandler &rArr; INTC_IrqSignIn
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_IrqSignIn
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[b3]"></a>USART_RxError_IrqCallback</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, uart.o(i.USART_RxError_IrqCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_RxError_IrqCallback &rArr; USART_ClearStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadData
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(i.Uart_Init)
</UL>
<P><STRONG><a name="[b4]"></a>USART_RxFull_IrqCallback</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, uart.o(i.USART_RxFull_IrqCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_RxFull_IrqCallback &rArr; USART_ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(i.Uart_Init)
</UL>
<P><STRONG><a name="[ac]"></a>TIM0_A_CompareIrqCallback</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, time.o(i.TIM0_A_CompareIrqCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM0_A_CompareIrqCallback &rArr; TMR0_ClearStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_ClearStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> time.o(i.TIM0_A_Config)
</UL>
<P><STRONG><a name="[1ac]"></a>TIM0_A_Config</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, time.o(i.TIM0_A_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TIM0_A_Config &rArr; TMR0_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_DelayMS
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg2PeriphClockCmd
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_StructInit
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_IntCmd
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_Init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_HWStopCondCmd
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_IrqSignIn
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Init_Template
</UL>

<P><STRONG><a name="[112]"></a>Fscbt615_Disconnect_Set</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bt615.o(i.Fscbt615_Disconnect_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Fscbt615_Disconnect_Set &rArr; GPIO_SetPins
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT615Init
</UL>

<P><STRONG><a name="[10f]"></a>Fscbt615_Power_Set</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bt615.o(i.Fscbt615_Power_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Fscbt615_Power_Set &rArr; GPIO_ResetPins
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT615Init
</UL>

<P><STRONG><a name="[110]"></a>Fscbt615_Reset_Set</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bt615.o(i.Fscbt615_Reset_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Fscbt615_Reset_Set &rArr; GPIO_SetPins
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT615Init
</UL>

<P><STRONG><a name="[113]"></a>Fscbt615_Trans_Mode_Set</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bt615.o(i.Fscbt615_Trans_Mode_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Fscbt615_Trans_Mode_Set &rArr; GPIO_SetPins
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT615Init
</UL>

<P><STRONG><a name="[111]"></a>Fscbt615_Work_Mode_Set</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bt615.o(i.Fscbt615_Work_Mode_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Fscbt615_Work_Mode_Set &rArr; GPIO_SetPins
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT615Init
</UL>

<P><STRONG><a name="[18d]"></a>CheckUARTTranmittedStatus</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hal_uart.o(i.CheckUARTTranmittedStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CheckUARTTranmittedStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart_Send
</UL>

<P><STRONG><a name="[a6]"></a>FrameReceivedCallbackHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hal_uart.o(i.FrameReceivedCallbackHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = FrameReceivedCallbackHandler &rArr; HAL_RxUartMsgMainFun &rArr; HAL_TP_DriverWriteDataInTP &rArr; HAL_UART_DriverWriteDataInUartTP &rArr; WriteDataInFifo &rArr; GetCanWriteLen &rArr; FindFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart_Receive
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RxUartMsgMainFun
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_uart.o(i.Hal_UartInit)
</UL>
<P><STRONG><a name="[15f]"></a>HAL_RxUartMsgMainFun</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, hal_uart.o(i.HAL_RxUartMsgMainFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = HAL_RxUartMsgMainFun &rArr; HAL_TP_DriverWriteDataInTP &rArr; HAL_UART_DriverWriteDataInUartTP &rArr; WriteDataInFifo &rArr; GetCanWriteLen &rArr; FindFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRxCANMsgId
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TP_DriverWriteDataInTP
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrameReceivedCallbackHandler
</UL>

<P><STRONG><a name="[179]"></a>IsRxCANMsgId</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hal_uart.o(i.IsRxCANMsgId))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RxUartMsgMainFun
</UL>

<P><STRONG><a name="[b9]"></a>UARTTP_AbortTxMsg</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hal_uart_tp_cfg.o(i.UARTTP_AbortTxMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UARTTP_AbortTxMsg &rArr; UARTTP_ClearTXBUSFIFO &rArr; ClearFIFO &rArr; FindFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_ClearTXBUSFIFO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_uart_tp_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[1ba]"></a>UARTTP_ClearTXBUSFIFO</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, hal_uart_tp_cfg.o(i.UARTTP_ClearTXBUSFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UARTTP_ClearTXBUSFIFO &rArr; ClearFIFO &rArr; FindFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_AbortTxMsg
</UL>

<P><STRONG><a name="[1c4]"></a>UARTTP_IsReceivedMsgIDValid</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_uart_tp_cfg.o(i.UARTTP_IsReceivedMsgIDValid))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_RxMsg
</UL>

<P><STRONG><a name="[b8]"></a>UARTTP_RxMsg</STRONG> (Thumb, 162 bytes, Stack size 112 bytes, hal_uart_tp_cfg.o(i.UARTTP_RxMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = UARTTP_RxMsg &rArr; ReadDataFromFifo &rArr; GetCanReadLen &rArr; FindFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataFromFifo
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCanReadLen
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_IsReceivedMsgIDValid
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_uart_tp_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[b7]"></a>UARTTP_TxMsg</STRONG> (Thumb, 146 bytes, Stack size 56 bytes, hal_uart_tp_cfg.o(i.UARTTP_TxMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UARTTP_TxMsg &rArr; WriteDataInFifo &rArr; GetCanWriteLen &rArr; FindFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataInFifo
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCanWriteLen
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearFIFO
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_uart_tp_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[e5]"></a>AddInList</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, multi_cyc_fifo.o(i.AddInList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AddInList
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplyFifo
</UL>

<P><STRONG><a name="[e4]"></a>FindFifo</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, multi_cyc_fifo.o(i.FindFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FindFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataInFifo
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataFromFifo
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCanWriteLen
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCanReadLen
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearFIFO
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplyFifo
</UL>

<P><STRONG><a name="[1be]"></a>GetRXFFFrameMsgLength</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, hal_uart_tp.o(i.GetRXFFFrameMsgLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetRXFFFrameMsgLength
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_DoReceiveFF
</UL>

<P><STRONG><a name="[1bf]"></a>GetRXSFFrameMsgLength</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, hal_uart_tp.o(i.GetRXSFFrameMsgLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetRXSFFrameMsgLength
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_DoReceiveSF
</UL>

<P><STRONG><a name="[1bb]"></a>UARTTP_CopyAFrameDataInRxFifo</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, hal_uart_tp.o(i.UARTTP_CopyAFrameDataInRxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UARTTP_CopyAFrameDataInRxFifo &rArr; WriteDataInFifo &rArr; GetCanWriteLen &rArr; FindFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataInFifo
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCanWriteLen
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_DoReceiveSF
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_DoReceiveCF
</UL>

<P><STRONG><a name="[1bc]"></a>UARTTP_CopyAFrameFromFifoToBuf</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, hal_uart_tp.o(i.UARTTP_CopyAFrameFromFifoToBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UARTTP_CopyAFrameFromFifoToBuf &rArr; ReadDataFromFifo &rArr; GetCanReadLen &rArr; FindFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataFromFifo
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCanReadLen
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_RegisterTransmittedAFrmaeMsgCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_DoUartTpIdle
</UL>

<P><STRONG><a name="[be]"></a>UARTTP_DoReceiveCF</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, hal_uart_tp.o(i.UARTTP_DoReceiveCF))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UARTTP_DoReceiveCF &rArr; UARTTP_CopyAFrameDataInRxFifo &rArr; WriteDataInFifo &rArr; GetCanWriteLen &rArr; FindFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_CopyAFrameDataInRxFifo
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_uart_tp.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>UARTTP_DoReceiveFC</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, hal_uart_tp.o(i.UARTTP_DoReceiveFC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UARTTP_DoReceiveFC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_uart_tp.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>UARTTP_DoReceiveFF</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, hal_uart_tp.o(i.UARTTP_DoReceiveFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UARTTP_DoReceiveFF &rArr; GetRXFFFrameMsgLength
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRXFFFrameMsgLength
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_uart_tp.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>UARTTP_DoReceiveSF</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, hal_uart_tp.o(i.UARTTP_DoReceiveSF))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UARTTP_DoReceiveSF &rArr; UARTTP_CopyAFrameDataInRxFifo &rArr; WriteDataInFifo &rArr; GetCanWriteLen &rArr; FindFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_CopyAFrameDataInRxFifo
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRXSFFrameMsgLength
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_uart_tp.o(.constdata)
</UL>
<P><STRONG><a name="[186]"></a>UARTTP_DoRegisterTxMsgCallBack</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hal_uart_tp.o(i.UARTTP_DoRegisterTxMsgCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UARTTP_DoRegisterTxMsgCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTTP_MainFun
</UL>

<P><STRONG><a name="[c2]"></a>UARTTP_DoTransmitCF</STRONG> (Thumb, 316 bytes, Stack size 40 bytes, hal_uart_tp.o(i.UARTTP_DoTransmitCF))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UARTTP_DoTransmitCF
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_SetTxMsgStatus
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_SetFrameType
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_RegisterTxMsgCallBack
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_uart_tp.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>UARTTP_DoTransmitCFCallBack</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, hal_uart_tp.o(i.UARTTP_DoTransmitCFCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UARTTP_DoTransmitCFCallBack &rArr; TP_DoTransmittedAFrameMsgCallBack
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_DoTransmittedAFrameMsgCallBack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_uart_tp.o(i.UARTTP_DoTransmitCF)
</UL>
<P><STRONG><a name="[bd]"></a>UARTTP_DoTransmitFC</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, hal_uart_tp.o(i.UARTTP_DoTransmitFC))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UARTTP_DoTransmitFC
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_SetTxMsgStatus
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_SetFrameType
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_RegisterTxMsgCallBack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_uart_tp.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>UARTTP_DoTransmitFCCallBack</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, hal_uart_tp.o(i.UARTTP_DoTransmitFCCallBack))
<BR>[Address Reference Count : 1]<UL><LI> hal_uart_tp.o(i.UARTTP_DoTransmitFC)
</UL>
<P><STRONG><a name="[c0]"></a>UARTTP_DoTransmitFF</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, hal_uart_tp.o(i.UARTTP_DoTransmitFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UARTTP_DoTransmitFF
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_SetTxMsgStatus
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_SetFrameType
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_RegisterTxMsgCallBack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_uart_tp.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>UARTTP_DoTransmitFFCallBack</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, hal_uart_tp.o(i.UARTTP_DoTransmitFFCallBack))
<BR>[Address Reference Count : 1]<UL><LI> hal_uart_tp.o(i.UARTTP_DoTransmitFF)
</UL>
<P><STRONG><a name="[bf]"></a>UARTTP_DoTransmitSF</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, hal_uart_tp.o(i.UARTTP_DoTransmitSF))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UARTTP_DoTransmitSF
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_SetTxMsgStatus
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_SetFrameType
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_RegisterTxMsgCallBack
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_uart_tp.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>UARTTP_DoTransmitSFCallBack</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hal_uart_tp.o(i.UARTTP_DoTransmitSFCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UARTTP_DoTransmitSFCallBack &rArr; TP_DoTransmittedAFrameMsgCallBack
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_DoTransmittedAFrameMsgCallBack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_uart_tp.o(i.UARTTP_DoTransmitSF)
</UL>
<P><STRONG><a name="[ba]"></a>UARTTP_DoUartTpIdle</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, hal_uart_tp.o(i.UARTTP_DoUartTpIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = UARTTP_DoUartTpIdle &rArr; UARTTP_CopyAFrameFromFifoToBuf &rArr; ReadDataFromFifo &rArr; GetCanReadLen &rArr; FindFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_CopyAFrameFromFifoToBuf
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_RegisterTransmittedAFrmaeMsgCallBack
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_uart_tp.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>UARTTP_DoWaitingTxMsg</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, hal_uart_tp.o(i.UARTTP_DoWaitingTxMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UARTTP_DoWaitingTxMsg &rArr; TP_DoTransmittedAFrameMsgCallBack
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_SetTxMsgStatus
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_RegisterTxMsgCallBack
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_DoTransmittedAFrameMsgCallBack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_uart_tp.o(.constdata)
</UL>
<P><STRONG><a name="[1c2]"></a>UARTTP_RegisterTxMsgCallBack</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_uart_tp.o(i.UARTTP_RegisterTxMsgCallBack))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_DoWaitingTxMsg
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_DoTransmitSF
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_DoTransmitFF
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_DoTransmitFC
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_DoTransmitCF
</UL>

<P><STRONG><a name="[1c0]"></a>UARTTP_SetFrameType</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hal_uart_tp.o(i.UARTTP_SetFrameType))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_DoTransmitSF
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_DoTransmitFF
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_DoTransmitFC
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_DoTransmitCF
</UL>

<P><STRONG><a name="[1c1]"></a>UARTTP_SetTxMsgStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_uart_tp.o(i.UARTTP_SetTxMsgStatus))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_DoWaitingTxMsg
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_DoTransmitSF
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_DoTransmitFF
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_DoTransmitFC
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTP_DoTransmitCF
</UL>

<P><STRONG><a name="[ae]"></a>UARTTP_TxMsgSuccessfulCallBack</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_uart_tp.o(i.UARTTP_TxMsgSuccessfulCallBack))
<BR>[Address Reference Count : 4]<UL><LI> hal_uart_tp.o(i.UARTTP_DoTransmitCF)
<LI> hal_uart_tp.o(i.UARTTP_DoTransmitFC)
<LI> hal_uart_tp.o(i.UARTTP_DoTransmitFF)
<LI> hal_uart_tp.o(i.UARTTP_DoTransmitSF)
</UL>
<P><STRONG><a name="[128]"></a>CreatSoftwareCrc16</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, hal_crc.o(i.CreatSoftwareCrc16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CreatSoftwareCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_HAL_CreatSoftwareCrc
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_HAL_CreatHardwareCrc
</UL>

<P><STRONG><a name="[a5]"></a>HAL_FLASH_Deinit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal_flash.o(i.HAL_FLASH_Deinit))
<BR>[Address Reference Count : 1]<UL><LI> hal_flash.o(i.HAL_FLASH_RegisterFlashAPI)
</UL>
<P><STRONG><a name="[a2]"></a>HAL_FLASH_EraseSector</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, hal_flash.o(i.HAL_FLASH_EraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASH_EraseSector &rArr; BSP_EraseFlashSector
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EraseFlashSector
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Get1SectorBytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_flash.o(i.HAL_FLASH_RegisterFlashAPI)
</UL>
<P><STRONG><a name="[a1]"></a>HAL_FLASH_Init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hal_flash.o(i.HAL_FLASH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_FLASH_Init &rArr; BSP_InitFlashAPI
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitFlashAPI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_flash.o(i.HAL_FLASH_RegisterFlashAPI)
</UL>
<P><STRONG><a name="[a4]"></a>HAL_FLASH_ReadData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_flash.o(i.HAL_FLASH_ReadData))
<BR>[Address Reference Count : 1]<UL><LI> hal_flash.o(i.HAL_FLASH_RegisterFlashAPI)
</UL>
<P><STRONG><a name="[a3]"></a>HAL_FLASH_WriteData</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, hal_flash.o(i.HAL_FLASH_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_FLASH_WriteData &rArr; BSP_WriteFlash
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_WriteFlash
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_flash.o(i.HAL_FLASH_RegisterFlashAPI)
</UL>
<P><STRONG><a name="[170]"></a>HAL_FLASH_GetFlashConfigInfo_Inline</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hal_flash_cfg.o(i.HAL_FLASH_GetFlashConfigInfo_Inline))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_FLASH_GetFlashConfigInfo_Inline
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_SectorNumberToFlashAddress
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_GetTotalSectors
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_APPAddrCheck
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_GetTotalSectors_Inline
</UL>

<P><STRONG><a name="[175]"></a>HAL_FLASH_GetFlashLengthToSectors_Inline</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, hal_flash_cfg.o(i.HAL_FLASH_GetFlashLengthToSectors_Inline))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_FLASH_GetFlashLengthToSectors_Inline
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_GetTotalSectors
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_GetTotalSectors_Inline
</UL>

<P><STRONG><a name="[174]"></a>HAL_FLASH_GetResetHandlerLen</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_flash_cfg.o(i.HAL_FLASH_GetResetHandlerLen))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_GetResetHandlerInfo
</UL>

<P><STRONG><a name="[173]"></a>HAL_FLASH_GetStorageRestHandlerAddr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_flash_cfg.o(i.HAL_FLASH_GetStorageRestHandlerAddr))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_GetResetHandlerInfo
</UL>

<P><STRONG><a name="[176]"></a>HAL_FLASH_GetTotalSectors_Inline</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, hal_flash_cfg.o(i.HAL_FLASH_GetTotalSectors_Inline))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_FLASH_GetTotalSectors_Inline &rArr; HAL_FLASH_GetFlashLengthToSectors_Inline
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_GetFlashLengthToSectors_Inline
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_GetFlashConfigInfo_Inline
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_SectorNumberToFlashAddress
</UL>

<P><STRONG><a name="[172]"></a>HAL_FLASH_IsEnableStorageResetHandlerInFlash</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_flash_cfg.o(i.HAL_FLASH_IsEnableStorageResetHandlerInFlash))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_GetResetHandlerInfo
</UL>

<P><STRONG><a name="[162]"></a>GFMul</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, aes.o(i.GFMul))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GFMul &rArr; GFMul14 &rArr; GFMul12 &rArr; GFMul8 &rArr; GFMul4
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GFMul9
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GFMul3
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GFMul2
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GFMul14
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GFMul13
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GFMul11
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deMixColumns
</UL>

<P><STRONG><a name="[166]"></a>GFMul11</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, aes.o(i.GFMul11))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GFMul11 &rArr; GFMul9 &rArr; GFMul8 &rArr; GFMul4
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GFMul9
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GFMul2
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GFMul
</UL>

<P><STRONG><a name="[169]"></a>GFMul12</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, aes.o(i.GFMul12))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GFMul12 &rArr; GFMul8 &rArr; GFMul4
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GFMul8
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GFMul4
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GFMul14
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GFMul13
</UL>

<P><STRONG><a name="[167]"></a>GFMul13</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, aes.o(i.GFMul13))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GFMul13 &rArr; GFMul12 &rArr; GFMul8 &rArr; GFMul4
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GFMul12
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GFMul
</UL>

<P><STRONG><a name="[168]"></a>GFMul14</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, aes.o(i.GFMul14))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GFMul14 &rArr; GFMul12 &rArr; GFMul8 &rArr; GFMul4
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GFMul2
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GFMul12
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GFMul
</UL>

<P><STRONG><a name="[163]"></a>GFMul2</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, aes.o(i.GFMul2))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GFMul8
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GFMul4
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GFMul3
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GFMul14
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GFMul11
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GFMul
</UL>

<P><STRONG><a name="[164]"></a>GFMul3</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, aes.o(i.GFMul3))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GFMul3
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GFMul2
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GFMul
</UL>

<P><STRONG><a name="[16b]"></a>GFMul4</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, aes.o(i.GFMul4))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GFMul4
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GFMul2
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GFMul8
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GFMul12
</UL>

<P><STRONG><a name="[16a]"></a>GFMul8</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, aes.o(i.GFMul8))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GFMul8 &rArr; GFMul4
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GFMul4
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GFMul2
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GFMul9
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GFMul12
</UL>

<P><STRONG><a name="[165]"></a>GFMul9</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, aes.o(i.GFMul9))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GFMul9 &rArr; GFMul8 &rArr; GFMul4
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GFMul8
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GFMul11
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GFMul
</UL>

<P><STRONG><a name="[1a6]"></a>T</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, aes.o(i.T))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = T &rArr; leftLoop4int
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;splitIntToArray
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mergeArrayToInt
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leftLoop4int
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNumFromSBox
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extendKey
</UL>

<P><STRONG><a name="[1ed]"></a>addRoundKey</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, aes.o(i.addRoundKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = addRoundKey &rArr; splitIntToArray
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;splitIntToArray
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deAes
</UL>

<P><STRONG><a name="[1f6]"></a>addRoundTowArray</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, aes.o(i.addRoundTowArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = addRoundTowArray
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deAes
</UL>

<P><STRONG><a name="[1f0]"></a>checkKeyLen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, aes.o(i.checkKeyLen))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deAes
</UL>

<P><STRONG><a name="[1f7]"></a>convertArrayToStr</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, aes.o(i.convertArrayToStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = convertArrayToStr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deAes
</UL>

<P><STRONG><a name="[1ee]"></a>convertToIntArray</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, aes.o(i.convertToIntArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = convertToIntArray
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIntFromChar
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deAes
</UL>

<P><STRONG><a name="[1f4]"></a>deMixColumns</STRONG> (Thumb, 156 bytes, Stack size 88 bytes, aes.o(i.deMixColumns))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = deMixColumns &rArr; GFMul &rArr; GFMul14 &rArr; GFMul12 &rArr; GFMul8 &rArr; GFMul4
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GFMul
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deAes
</UL>

<P><STRONG><a name="[1f3]"></a>deShiftRows</STRONG> (Thumb, 138 bytes, Stack size 64 bytes, aes.o(i.deShiftRows))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = deShiftRows &rArr; rightLoop4int
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rightLoop4int
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deAes
</UL>

<P><STRONG><a name="[1f2]"></a>deSubBytes</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, aes.o(i.deSubBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = deSubBytes &rArr; getNumFromS1Box
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNumFromS1Box
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deAes
</UL>

<P><STRONG><a name="[1f1]"></a>extendKey</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, aes.o(i.extendKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = extendKey &rArr; T &rArr; leftLoop4int
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getWordFromStr
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deAes
</UL>

<P><STRONG><a name="[1f5]"></a>getArrayFrom4W</STRONG> (Thumb, 126 bytes, Stack size 88 bytes, aes.o(i.getArrayFrom4W))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = getArrayFrom4W &rArr; splitIntToArray
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;splitIntToArray
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deAes
</UL>

<P><STRONG><a name="[1ef]"></a>getIntFromChar</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, aes.o(i.getIntFromChar))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getWordFromStr
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertToIntArray
</UL>

<P><STRONG><a name="[1fb]"></a>getLeft4Bit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, aes.o(i.getLeft4Bit))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNumFromSBox
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNumFromS1Box
</UL>

<P><STRONG><a name="[1f9]"></a>getNumFromS1Box</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, aes.o(i.getNumFromS1Box))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getNumFromS1Box
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRight4Bit
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLeft4Bit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deSubBytes
</UL>

<P><STRONG><a name="[1a9]"></a>getNumFromSBox</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, aes.o(i.getNumFromSBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getNumFromSBox
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRight4Bit
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLeft4Bit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T
</UL>

<P><STRONG><a name="[1fc]"></a>getRight4Bit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, aes.o(i.getRight4Bit))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNumFromSBox
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNumFromS1Box
</UL>

<P><STRONG><a name="[1fa]"></a>getWordFromStr</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, aes.o(i.getWordFromStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = getWordFromStr
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIntFromChar
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extendKey
</UL>

<P><STRONG><a name="[1a8]"></a>leftLoop4int</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, aes.o(i.leftLoop4int))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = leftLoop4int
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T
</UL>

<P><STRONG><a name="[1aa]"></a>mergeArrayToInt</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, aes.o(i.mergeArrayToInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mergeArrayToInt
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T
</UL>

<P><STRONG><a name="[1f8]"></a>rightLoop4int</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, aes.o(i.rightLoop4int))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rightLoop4int
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deShiftRows
</UL>

<P><STRONG><a name="[1a7]"></a>splitIntToArray</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, aes.o(i.splitIntToArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = splitIntToArray
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getArrayFrom4W
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addRoundKey
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T
</UL>

<P><STRONG><a name="[12f]"></a>DoCheckNewestAPPCnt</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, app_flash.o(i.DoCheckNewestAPPCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DoCheckNewestAPPCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCheckNewestAPPInfo
</UL>

<P><STRONG><a name="[12e]"></a>DoCheckNewestAPPInfo</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, app_flash.o(i.DoCheckNewestAPPInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DoCheckNewestAPPInfo &rArr; CRC_HAL_CreatSoftwareCrc &rArr; CreatSoftwareCrc16
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_HAL_CreatSoftwareCrc
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCheckNewestAPPCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_GetOldAPPType
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_GetNewestAPPType
</UL>

<P><STRONG><a name="[13b]"></a>FlashChecksum</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, app_flash.o(i.FlashChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FlashChecksum &rArr; CRC_HAL_CreatHardwareCrc &rArr; CreatSoftwareCrc16
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_WDT_FeedDog
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_HAL_CreatHardwareCrc
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFlashDriverSoftwareData
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_RegisterFlashAPI
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_OperateMainFunction
</UL>

<P><STRONG><a name="[13e]"></a>FlashErase</STRONG> (Thumb, 840 bytes, Stack size 64 bytes, app_flash.o(i.FlashErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = FlashErase &rArr; Flash_GetOldAPPType &rArr; DoCheckNewestAPPInfo &rArr; CRC_HAL_CreatSoftwareCrc &rArr; CreatSoftwareCrc16
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_WDT_FeedDog
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_HAL_CreatSoftwareCrc
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreOperateFlashActiveJob
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_GetOldAPPType
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_SectorNumberToFlashAddress
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_GetTotalSectors
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_GetFlashLengthToSectors
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_GetFlashConfigInfo
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_GetEraseFlashASectorMaxTimeMs
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Get1SectorBytes
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_GetUDSS3WatermarkTimerMs
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_OperateMainFunction
</UL>

<P><STRONG><a name="[148]"></a>FlashWrite</STRONG> (Thumb, 404 bytes, Stack size 24 bytes, app_flash.o(i.FlashWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FlashWrite &rArr; CRC_HAL_CreatSoftwareCrc &rArr; CreatSoftwareCrc16
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_WDT_FeedDog
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_HAL_CreatSoftwareCrc
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_InitDowloadInfo_Inline
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_OperateMainFunction
</UL>

<P><STRONG><a name="[14a]"></a>Flash_EraseFlashDriverInRAM_Inline</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, app_flash.o(i.Flash_EraseFlashDriverInRAM_Inline))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Flash_EraseFlashDriverInRAM_Inline
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_GetFlashDriverInfo
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_InitDowloadInfo_Inline
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_InitDowloadInfo
</UL>

<P><STRONG><a name="[141]"></a>Flash_GetOldAPPType</STRONG> (Thumb, 88 bytes, Stack size 104 bytes, app_flash.o(i.Flash_GetOldAPPType))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Flash_GetOldAPPType &rArr; DoCheckNewestAPPInfo &rArr; CRC_HAL_CreatSoftwareCrc &rArr; CreatSoftwareCrc16
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCheckNewestAPPInfo
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_GetAPPInfo_Info
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashErase
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteFlashAppInfo
</UL>

<P><STRONG><a name="[155]"></a>Flash_GetOperateFlashActiveJob</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_flash.o(i.Flash_GetOperateFlashActiveJob))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_OperateMainFunction
</UL>

<P><STRONG><a name="[149]"></a>Flash_InitDowloadInfo_Inline</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, app_flash.o(i.Flash_InitDowloadInfo_Inline))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Flash_InitDowloadInfo_Inline &rArr; Flash_EraseFlashDriverInRAM_Inline
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SetOperateFlashActiveJob_Inline
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SetNextDownloadStep_Inline
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_EraseFlashDriverInRAM_Inline
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
</UL>

<P><STRONG><a name="[151]"></a>Flash_SetNextDownloadStep_Inline</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_flash.o(i.Flash_SetNextDownloadStep_Inline))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_InitDowloadInfo_Inline
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_InitDowloadInfo
</UL>

<P><STRONG><a name="[152]"></a>Flash_SetOperateFlashActiveJob_Inline</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_flash.o(i.Flash_SetOperateFlashActiveJob_Inline))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Flash_SetOperateFlashActiveJob_Inline
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_InitDowloadInfo_Inline
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_InitDowloadInfo
</UL>

<P><STRONG><a name="[13c]"></a>IsFlashDriverSoftwareData</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, app_flash.o(i.IsFlashDriverSoftwareData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IsFlashDriverSoftwareData
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_GetFlashDriverInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashChecksum
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ProgramRegion
</UL>

<P><STRONG><a name="[153]"></a>ReadNewestAppInfoFromFlash</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, app_flash.o(i.ReadNewestAppInfoFromFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ReadNewestAppInfoFromFlash &rArr; Flash_GetNewestAPPType &rArr; DoCheckNewestAPPInfo &rArr; CRC_HAL_CreatSoftwareCrc &rArr; CreatSoftwareCrc16
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_GetAPPInfo_Info
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_GetNewestAPPType
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_IsReadAppInfoFromFlashValid
</UL>

<P><STRONG><a name="[a0]"></a>RequetMoreTimeSuccessfulFromHost</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, app_flash.o(i.RequetMoreTimeSuccessfulFromHost))
<BR>[Address Reference Count : 1]<UL><LI> app_flash.o(i.FlashErase)
</UL>
<P><STRONG><a name="[147]"></a>RestoreOperateFlashActiveJob</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_flash.o(i.RestoreOperateFlashActiveJob))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashErase
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_OperateMainFunction
</UL>

<P><STRONG><a name="[158]"></a>SavedFlashData</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, app_flash.o(i.SavedFlashData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SavedFlashData
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ProgramRegion
</UL>

<P><STRONG><a name="[1c8]"></a>fsl_rand</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_uds_alg.o(i.fsl_rand))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_ALG_GetRandom
</UL>

<P><STRONG><a name="[1c7]"></a>fsl_srand</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_uds_alg.o(i.fsl_srand))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_ALG_GetRandom
</UL>

<P><STRONG><a name="[c5]"></a>CommunicationControl</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, app_uds_cfg.o(i.CommunicationControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CommunicationControl
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNegativeErroCode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uds_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>ControlDTCSetting</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, app_uds_cfg.o(i.ControlDTCSetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ControlDTCSetting
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNegativeErroCode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uds_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>DigSession</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, app_uds_cfg.o(i.DigSession))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DigSession
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNegativeErroCode
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurrentSession
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartS3Server
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uds_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[130]"></a>DoCheckProgrammingDependency</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_uds_cfg.o(i.DoCheckProgrammingDependency))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = DoCheckProgrammingDependency &rArr; Flash_IsReadAppInfoFromFlashValid &rArr; ReadNewestAppInfoFromFlash &rArr; Flash_GetNewestAPPType &rArr; DoCheckNewestAPPInfo &rArr; CRC_HAL_CreatSoftwareCrc &rArr; CreatSoftwareCrc16
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_IsReadAppInfoFromFlashValid
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_IsAppInFlashValid
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoutineControl
</UL>

<P><STRONG><a name="[aa]"></a>DoCheckSum</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_uds_cfg.o(i.DoCheckSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DoCheckSum &rArr; Flash_SetOperateFlashActiveJob
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SetOperateFlashActiveJob
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uds_cfg.o(i.RoutineControl)
</UL>
<P><STRONG><a name="[a9]"></a>DoEraseFlash</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_uds_cfg.o(i.DoEraseFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DoEraseFlash &rArr; Flash_SetOperateFlashActiveJob
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SetOperateFlashActiveJob
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uds_cfg.o(i.RoutineControl)
</UL>
<P><STRONG><a name="[9f]"></a>DoEraseFlashResponse</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, app_uds_cfg.o(i.DoEraseFlashResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = DoEraseFlashResponse &rArr; TP_WriteAFrameDataInTP &rArr; WriteDataInFifo &rArr; GetCanWriteLen &rArr; FindFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_WriteAFrameDataInTP
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_GetConfigTxMsgID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uds_cfg.o(i.DoEraseFlash)
</UL>
<P><STRONG><a name="[a8]"></a>DoResetMCU</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_uds_cfg.o(i.DoResetMCU))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DoResetMCU &rArr; HAL_SW_RESTT &rArr; BSP_SW_RESTT &rArr; WDT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SW_RESTT
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_SystemTickCtl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uds_cfg.o(i.ResetECU)
</UL>
<P><STRONG><a name="[9e]"></a>DoResponseChecksum</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, app_uds_cfg.o(i.DoResponseChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = DoResponseChecksum &rArr; TP_WriteAFrameDataInTP &rArr; WriteDataInFifo &rArr; GetCanWriteLen &rArr; FindFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_WriteAFrameDataInTP
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_GetConfigTxMsgID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uds_cfg.o(i.DoCheckSum)
</UL>
<P><STRONG><a name="[1da]"></a>GetUdsS3ServerTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_uds_cfg.o(i.GetUdsS3ServerTime))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_SystemTickCtl
</UL>

<P><STRONG><a name="[1dc]"></a>GetUdsSecurityReqLockTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_uds_cfg.o(i.GetUdsSecurityReqLockTime))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_SystemTickCtl
</UL>

<P><STRONG><a name="[190]"></a>IsCheckProgrammingDependency</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_uds_cfg.o(i.IsCheckProgrammingDependency))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsCheckProgrammingDependency &rArr; IsCheckRoutineControlRight
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCheckRoutineControlRight
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoutineControl
</UL>

<P><STRONG><a name="[191]"></a>IsCheckRoutineControlRight</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, app_uds_cfg.o(i.IsCheckRoutineControlRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IsCheckRoutineControlRight
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEraseMemoryRoutineControl
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCheckSumRoutineControl
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCheckProgrammingDependency
</UL>

<P><STRONG><a name="[192]"></a>IsCheckSumRoutineControl</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_uds_cfg.o(i.IsCheckSumRoutineControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsCheckSumRoutineControl &rArr; IsCheckRoutineControlRight
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCheckRoutineControlRight
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoutineControl
</UL>

<P><STRONG><a name="[199]"></a>IsDownloadDataAddrValid</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, app_uds_cfg.o(i.IsDownloadDataAddrValid))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RequestDownload
</UL>

<P><STRONG><a name="[19a]"></a>IsDownloadDataLenValid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_uds_cfg.o(i.IsDownloadDataLenValid))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RequestDownload
</UL>

<P><STRONG><a name="[193]"></a>IsEraseMemoryRoutineControl</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_uds_cfg.o(i.IsEraseMemoryRoutineControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsEraseMemoryRoutineControl &rArr; IsCheckRoutineControlRight
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCheckRoutineControlRight
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoutineControl
</UL>

<P><STRONG><a name="[194]"></a>IsReceivedKeyRight</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, app_uds_cfg.o(i.IsReceivedKeyRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = IsReceivedKeyRight &rArr; UDS_ALG_DecryptData &rArr; deAes &rArr; deMixColumns &rArr; GFMul &rArr; GFMul14 &rArr; GFMul12 &rArr; GFMul8 &rArr; GFMul4
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_ALG_DecryptData
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecurityAccess
</UL>

<P><STRONG><a name="[1de]"></a>IsRxUdsMsg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_uds_cfg.o(i.IsRxUdsMsg))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_SystemTickCtl
</UL>

<P><STRONG><a name="[1ec]"></a>IsWriteFingerprintRight</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, app_uds_cfg.o(i.IsWriteFingerprintRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsWriteFingerprintRight
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataByIdentifier
</UL>

<P><STRONG><a name="[ce]"></a>ReadDataByIdentifier</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, app_uds_cfg.o(i.ReadDataByIdentifier))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ReadDataByIdentifier &rArr; Flash_GetNewestAPPType &rArr; DoCheckNewestAPPInfo &rArr; CRC_HAL_CreatSoftwareCrc &rArr; CreatSoftwareCrc16
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNegativeErroCode
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_GetNewestAPPType
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_GetAPPVersion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uds_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>RequestDownload</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, app_uds_cfg.o(i.RequestDownload))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RequestDownload &rArr; Flash_InitDowloadInfo &rArr; Flash_EraseFlashDriverInRAM_Inline
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDownloadDataLenValid
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDownloadDataAddrValid
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNegativeErroCode
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SetNextDownloadStep
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveDownloadDataInfo
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_InitDowloadInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uds_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>RequestMoreTime</STRONG> (Thumb, 66 bytes, Stack size 1056 bytes, app_uds_cfg.o(i.RequestMoreTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = RequestMoreTime &rArr; TP_WriteAFrameDataInTP &rArr; WriteDataInFifo &rArr; GetCanWriteLen &rArr; FindFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_WriteAFrameDataInTP
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_GetConfigTxMsgID
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNegativeErroCode
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 2]<UL><LI> app_uds_cfg.o(i.DoCheckSum)
<LI> app_uds_cfg.o(i.DoEraseFlash)
</UL>
<P><STRONG><a name="[a7]"></a>RequestMoreTimeCallback</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_uds_cfg.o(i.RequestMoreTimeCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RequestMoreTimeCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartS3Server
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uds_cfg.o(i.RequestMoreTime)
</UL>
<P><STRONG><a name="[cb]"></a>RequestTransferExit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, app_uds_cfg.o(i.RequestTransferExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RequestTransferExit &rArr; Flash_InitDowloadInfo &rArr; Flash_EraseFlashDriverInRAM_Inline
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNegativeErroCode
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SetNextDownloadStep
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_InitDowloadInfo
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_GetCurDownloadStep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uds_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>ResetECU</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, app_uds_cfg.o(i.ResetECU))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ResetECU &rArr; SetDownloadAppSuccessful &rArr; Boot_CalculateInfoCRC &rArr; CRC_HAL_CreatSoftwareCrc &rArr; CreatSoftwareCrc16
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDownloadAppSuccessful
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_EraseFlashDriverInRAM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uds_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>RoutineControl</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, app_uds_cfg.o(i.RoutineControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = RoutineControl &rArr; Flash_WriteFlashAppInfo &rArr; Flash_GetOldAPPType &rArr; DoCheckNewestAPPInfo &rArr; CRC_HAL_CreatSoftwareCrc &rArr; CreatSoftwareCrc16
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEraseMemoryRoutineControl
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCheckSumRoutineControl
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCheckProgrammingDependency
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCheckProgrammingDependency
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNegativeErroCode
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartS3Server
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteFlashAppInfo
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SavedReceivedCheckSumCrc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uds_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>SecurityAccess</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, app_uds_cfg.o(i.SecurityAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = SecurityAccess &rArr; IsReceivedKeyRight &rArr; UDS_ALG_DecryptData &rArr; deAes &rArr; deMixColumns &rArr; GFMul &rArr; GFMul14 &rArr; GFMul12 &rArr; GFMul8 &rArr; GFMul4
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsReceivedKeyRight
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_ALG_GetRandom
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSecurityLevel
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNegativeErroCode
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uds_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[1db]"></a>SubUdsS3ServerTime</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_uds_cfg.o(i.SubUdsS3ServerTime))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_SystemTickCtl
</UL>

<P><STRONG><a name="[1dd]"></a>SubUdsSecurityReqLockTime</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_uds_cfg.o(i.SubUdsSecurityReqLockTime))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_SystemTickCtl
</UL>

<P><STRONG><a name="[b2]"></a>TXConfrimMsgCallback</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, app_uds_cfg.o(i.TXConfrimMsgCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TXConfrimMsgCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSecurityLevel
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurrentSession
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartS3Server
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uds_cfg.o(i.UDS_TxMsgToHost)
</UL>
<P><STRONG><a name="[ca]"></a>TransferData</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, app_uds_cfg.o(i.TransferData))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TransferData &rArr; Flash_ProgramRegion &rArr; Flash_InitDowloadInfo &rArr; Flash_EraseFlashDriverInRAM_Inline
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNegativeErroCode
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SetNextDownloadStep
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ProgramRegion
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_InitDowloadInfo
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_GetCurDownloadStep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uds_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>WriteDataByIdentifier</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, app_uds_cfg.o(i.WriteDataByIdentifier))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WriteDataByIdentifier &rArr; Flash_SaveFingerPrint &rArr; CRC_HAL_CreatSoftwareCrc &rArr; CreatSoftwareCrc16
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsWriteFingerprintRight
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNegativeErroCode
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SaveFingerPrint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uds_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[11a]"></a>Boot_IsAPPValid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_boot.o(i.Boot_IsAPPValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Boot_IsAPPValid &rArr; Flash_IsReadAppInfoFromFlashValid &rArr; ReadNewestAppInfoFromFlash &rArr; Flash_GetNewestAPPType &rArr; DoCheckNewestAPPInfo &rArr; CRC_HAL_CreatSoftwareCrc &rArr; CreatSoftwareCrc16
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_IsReadAppInfoFromFlashValid
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_IsAppInFlashValid
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_JumpToAppOrNot
</UL>

<P><STRONG><a name="[114]"></a>Boot_CalculateInfoCRC</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, app_boot_cfg.o(i.Boot_CalculateInfoCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Boot_CalculateInfoCRC &rArr; CRC_HAL_CreatSoftwareCrc &rArr; CreatSoftwareCrc16
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_HAL_CreatSoftwareCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRequestEnterBootloaderFlag
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDownloadAppSuccessful
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_IsInfoValid
</UL>

<P><STRONG><a name="[11d]"></a>Boot_IsInfoValid</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, app_boot_cfg.o(i.Boot_IsInfoValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Boot_IsInfoValid &rArr; Boot_CalculateInfoCRC &rArr; CRC_HAL_CreatSoftwareCrc &rArr; CreatSoftwareCrc16
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_CalculateInfoCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRequestEnterBootloader
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
